// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/sync/protocol/user_consent_specifics.proto

package sync_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Which feature does the consent apply to?
type UserConsentSpecifics_Feature int32

const (
	UserConsentSpecifics_FEATURE_UNSPECIFIED     UserConsentSpecifics_Feature = 0
	UserConsentSpecifics_CHROME_SYNC             UserConsentSpecifics_Feature = 1
	UserConsentSpecifics_PLAY_STORE              UserConsentSpecifics_Feature = 2
	UserConsentSpecifics_BACKUP_AND_RESTORE      UserConsentSpecifics_Feature = 3
	UserConsentSpecifics_GOOGLE_LOCATION_SERVICE UserConsentSpecifics_Feature = 4
	UserConsentSpecifics_CHROME_UNIFIED_CONSENT  UserConsentSpecifics_Feature = 5
	// TODO(markusheintz): ASSISTANT_ACTIVITY_CONTROL was only added for
	// compatibility with the Feature enum in UserEventSpecifics.UserConsent.
	// Delete this value once the value is deleted from the other proto.
	UserConsentSpecifics_ASSISTANT_ACTIVITY_CONTROL UserConsentSpecifics_Feature = 6
)

var UserConsentSpecifics_Feature_name = map[int32]string{
	0: "FEATURE_UNSPECIFIED",
	1: "CHROME_SYNC",
	2: "PLAY_STORE",
	3: "BACKUP_AND_RESTORE",
	4: "GOOGLE_LOCATION_SERVICE",
	5: "CHROME_UNIFIED_CONSENT",
	6: "ASSISTANT_ACTIVITY_CONTROL",
}
var UserConsentSpecifics_Feature_value = map[string]int32{
	"FEATURE_UNSPECIFIED":        0,
	"CHROME_SYNC":                1,
	"PLAY_STORE":                 2,
	"BACKUP_AND_RESTORE":         3,
	"GOOGLE_LOCATION_SERVICE":    4,
	"CHROME_UNIFIED_CONSENT":     5,
	"ASSISTANT_ACTIVITY_CONTROL": 6,
}

func (x UserConsentSpecifics_Feature) Enum() *UserConsentSpecifics_Feature {
	p := new(UserConsentSpecifics_Feature)
	*p = x
	return p
}
func (x UserConsentSpecifics_Feature) String() string {
	return proto.EnumName(UserConsentSpecifics_Feature_name, int32(x))
}
func (x *UserConsentSpecifics_Feature) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UserConsentSpecifics_Feature_value, data, "UserConsentSpecifics_Feature")
	if err != nil {
		return err
	}
	*x = UserConsentSpecifics_Feature(value)
	return nil
}
func (UserConsentSpecifics_Feature) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_user_consent_specifics_55b9f153f9ec65b9, []int{0, 0}
}

// Next id: 14
type UserConsentSpecifics struct {
	// The UI language Chrome is using, represented as the IETF language tag
	// defined in BCP 47. The region subtag is not included when it adds no
	// distinguishing information to the language tag (e.g. both "en-US"
	// and "fr" are correct here).
	Locale *string `protobuf:"bytes,4,opt,name=locale" json:"locale,omitempty"`
	// The local time on the client when the user consent was recorded. The time
	// as measured by client is given in microseconds since Windows epoch. This
	// is needed since user consent recording may happen when a client is
	// offline.
	ClientConsentTimeUsec *int64 `protobuf:"varint,12,opt,name=client_consent_time_usec,json=clientConsentTimeUsec" json:"client_consent_time_usec,omitempty"`
	// Types that are valid to be assigned to Consent:
	//	*UserConsentSpecifics_SyncConsent
	//	*UserConsentSpecifics_ArcBackupAndRestoreConsent
	//	*UserConsentSpecifics_ArcLocationServiceConsent
	//	*UserConsentSpecifics_ArcPlayTermsOfServiceConsent
	//	*UserConsentSpecifics_UnifiedConsent
	//	*UserConsentSpecifics_AssistantActivityControlConsent
	//	*UserConsentSpecifics_AccountPasswordsConsent
	Consent isUserConsentSpecifics_Consent `protobuf_oneof:"consent"`
	// The account ID of the user who gave the consent. This field is used
	// by UserEventService to distinguish consents from different users,
	// as UserConsent does not get deleted when a user signs out. However,
	// it should be cleared before being sent over the wire, as the UserEvent
	// is sent over an authenticated channel, so this information would be
	// redundant.
	//
	// For semantics and usage of the |account_id| in the signin codebase,
	// see IdentityManager::GetPrimaryAccountId() or CoreAccountId.
	AccountId *string                       `protobuf:"bytes,6,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Feature   *UserConsentSpecifics_Feature `protobuf:"varint,1,opt,name=feature,enum=sync_pb.UserConsentSpecifics_Feature" json:"feature,omitempty"` // Deprecated: Do not use.
	// Ids of the strings of the consent text presented to the user.
	DescriptionGrdIds []int32 `protobuf:"varint,2,rep,name=description_grd_ids,json=descriptionGrdIds" json:"description_grd_ids,omitempty"` // Deprecated: Do not use.
	// Id of the string of the UI element the user clicked when consenting.
	ConfirmationGrdId *int32 `protobuf:"varint,3,opt,name=confirmation_grd_id,json=confirmationGrdId" json:"confirmation_grd_id,omitempty"` // Deprecated: Do not use.
	// Was the consent for |feature| given or not given (denied/revoked)?
	Status               *UserConsentTypes_ConsentStatus `protobuf:"varint,5,opt,name=status,enum=sync_pb.UserConsentTypes_ConsentStatus" json:"status,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *UserConsentSpecifics) Reset()         { *m = UserConsentSpecifics{} }
func (m *UserConsentSpecifics) String() string { return proto.CompactTextString(m) }
func (*UserConsentSpecifics) ProtoMessage()    {}
func (*UserConsentSpecifics) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_consent_specifics_55b9f153f9ec65b9, []int{0}
}
func (m *UserConsentSpecifics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserConsentSpecifics.Unmarshal(m, b)
}
func (m *UserConsentSpecifics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserConsentSpecifics.Marshal(b, m, deterministic)
}
func (dst *UserConsentSpecifics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserConsentSpecifics.Merge(dst, src)
}
func (m *UserConsentSpecifics) XXX_Size() int {
	return xxx_messageInfo_UserConsentSpecifics.Size(m)
}
func (m *UserConsentSpecifics) XXX_DiscardUnknown() {
	xxx_messageInfo_UserConsentSpecifics.DiscardUnknown(m)
}

var xxx_messageInfo_UserConsentSpecifics proto.InternalMessageInfo

type isUserConsentSpecifics_Consent interface {
	isUserConsentSpecifics_Consent()
}

type UserConsentSpecifics_SyncConsent struct {
	SyncConsent *UserConsentTypes_SyncConsent `protobuf:"bytes,7,opt,name=sync_consent,json=syncConsent,oneof"`
}
type UserConsentSpecifics_ArcBackupAndRestoreConsent struct {
	ArcBackupAndRestoreConsent *UserConsentTypes_ArcBackupAndRestoreConsent `protobuf:"bytes,8,opt,name=arc_backup_and_restore_consent,json=arcBackupAndRestoreConsent,oneof"`
}
type UserConsentSpecifics_ArcLocationServiceConsent struct {
	ArcLocationServiceConsent *UserConsentTypes_ArcGoogleLocationServiceConsent `protobuf:"bytes,9,opt,name=arc_location_service_consent,json=arcLocationServiceConsent,oneof"`
}
type UserConsentSpecifics_ArcPlayTermsOfServiceConsent struct {
	ArcPlayTermsOfServiceConsent *UserConsentTypes_ArcPlayTermsOfServiceConsent `protobuf:"bytes,10,opt,name=arc_play_terms_of_service_consent,json=arcPlayTermsOfServiceConsent,oneof"`
}
type UserConsentSpecifics_UnifiedConsent struct {
	UnifiedConsent *UserConsentTypes_UnifiedConsent `protobuf:"bytes,13,opt,name=unified_consent,json=unifiedConsent,oneof"`
}
type UserConsentSpecifics_AssistantActivityControlConsent struct {
	AssistantActivityControlConsent *UserConsentTypes_AssistantActivityControlConsent `protobuf:"bytes,14,opt,name=assistant_activity_control_consent,json=assistantActivityControlConsent,oneof"`
}
type UserConsentSpecifics_AccountPasswordsConsent struct {
	AccountPasswordsConsent *UserConsentTypes_AccountPasswordsConsent `protobuf:"bytes,15,opt,name=account_passwords_consent,json=accountPasswordsConsent,oneof"`
}

func (*UserConsentSpecifics_SyncConsent) isUserConsentSpecifics_Consent()                     {}
func (*UserConsentSpecifics_ArcBackupAndRestoreConsent) isUserConsentSpecifics_Consent()      {}
func (*UserConsentSpecifics_ArcLocationServiceConsent) isUserConsentSpecifics_Consent()       {}
func (*UserConsentSpecifics_ArcPlayTermsOfServiceConsent) isUserConsentSpecifics_Consent()    {}
func (*UserConsentSpecifics_UnifiedConsent) isUserConsentSpecifics_Consent()                  {}
func (*UserConsentSpecifics_AssistantActivityControlConsent) isUserConsentSpecifics_Consent() {}
func (*UserConsentSpecifics_AccountPasswordsConsent) isUserConsentSpecifics_Consent()         {}

func (m *UserConsentSpecifics) GetConsent() isUserConsentSpecifics_Consent {
	if m != nil {
		return m.Consent
	}
	return nil
}

func (m *UserConsentSpecifics) GetLocale() string {
	if m != nil && m.Locale != nil {
		return *m.Locale
	}
	return ""
}

func (m *UserConsentSpecifics) GetClientConsentTimeUsec() int64 {
	if m != nil && m.ClientConsentTimeUsec != nil {
		return *m.ClientConsentTimeUsec
	}
	return 0
}

func (m *UserConsentSpecifics) GetSyncConsent() *UserConsentTypes_SyncConsent {
	if x, ok := m.GetConsent().(*UserConsentSpecifics_SyncConsent); ok {
		return x.SyncConsent
	}
	return nil
}

func (m *UserConsentSpecifics) GetArcBackupAndRestoreConsent() *UserConsentTypes_ArcBackupAndRestoreConsent {
	if x, ok := m.GetConsent().(*UserConsentSpecifics_ArcBackupAndRestoreConsent); ok {
		return x.ArcBackupAndRestoreConsent
	}
	return nil
}

func (m *UserConsentSpecifics) GetArcLocationServiceConsent() *UserConsentTypes_ArcGoogleLocationServiceConsent {
	if x, ok := m.GetConsent().(*UserConsentSpecifics_ArcLocationServiceConsent); ok {
		return x.ArcLocationServiceConsent
	}
	return nil
}

func (m *UserConsentSpecifics) GetArcPlayTermsOfServiceConsent() *UserConsentTypes_ArcPlayTermsOfServiceConsent {
	if x, ok := m.GetConsent().(*UserConsentSpecifics_ArcPlayTermsOfServiceConsent); ok {
		return x.ArcPlayTermsOfServiceConsent
	}
	return nil
}

// Deprecated: Do not use.
func (m *UserConsentSpecifics) GetUnifiedConsent() *UserConsentTypes_UnifiedConsent {
	if x, ok := m.GetConsent().(*UserConsentSpecifics_UnifiedConsent); ok {
		return x.UnifiedConsent
	}
	return nil
}

func (m *UserConsentSpecifics) GetAssistantActivityControlConsent() *UserConsentTypes_AssistantActivityControlConsent {
	if x, ok := m.GetConsent().(*UserConsentSpecifics_AssistantActivityControlConsent); ok {
		return x.AssistantActivityControlConsent
	}
	return nil
}

func (m *UserConsentSpecifics) GetAccountPasswordsConsent() *UserConsentTypes_AccountPasswordsConsent {
	if x, ok := m.GetConsent().(*UserConsentSpecifics_AccountPasswordsConsent); ok {
		return x.AccountPasswordsConsent
	}
	return nil
}

func (m *UserConsentSpecifics) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

// Deprecated: Do not use.
func (m *UserConsentSpecifics) GetFeature() UserConsentSpecifics_Feature {
	if m != nil && m.Feature != nil {
		return *m.Feature
	}
	return UserConsentSpecifics_FEATURE_UNSPECIFIED
}

// Deprecated: Do not use.
func (m *UserConsentSpecifics) GetDescriptionGrdIds() []int32 {
	if m != nil {
		return m.DescriptionGrdIds
	}
	return nil
}

// Deprecated: Do not use.
func (m *UserConsentSpecifics) GetConfirmationGrdId() int32 {
	if m != nil && m.ConfirmationGrdId != nil {
		return *m.ConfirmationGrdId
	}
	return 0
}

// Deprecated: Do not use.
func (m *UserConsentSpecifics) GetStatus() UserConsentTypes_ConsentStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return UserConsentTypes_CONSENT_STATUS_UNSPECIFIED
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UserConsentSpecifics) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UserConsentSpecifics_OneofMarshaler, _UserConsentSpecifics_OneofUnmarshaler, _UserConsentSpecifics_OneofSizer, []interface{}{
		(*UserConsentSpecifics_SyncConsent)(nil),
		(*UserConsentSpecifics_ArcBackupAndRestoreConsent)(nil),
		(*UserConsentSpecifics_ArcLocationServiceConsent)(nil),
		(*UserConsentSpecifics_ArcPlayTermsOfServiceConsent)(nil),
		(*UserConsentSpecifics_UnifiedConsent)(nil),
		(*UserConsentSpecifics_AssistantActivityControlConsent)(nil),
		(*UserConsentSpecifics_AccountPasswordsConsent)(nil),
	}
}

func _UserConsentSpecifics_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UserConsentSpecifics)
	// consent
	switch x := m.Consent.(type) {
	case *UserConsentSpecifics_SyncConsent:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SyncConsent); err != nil {
			return err
		}
	case *UserConsentSpecifics_ArcBackupAndRestoreConsent:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ArcBackupAndRestoreConsent); err != nil {
			return err
		}
	case *UserConsentSpecifics_ArcLocationServiceConsent:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ArcLocationServiceConsent); err != nil {
			return err
		}
	case *UserConsentSpecifics_ArcPlayTermsOfServiceConsent:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ArcPlayTermsOfServiceConsent); err != nil {
			return err
		}
	case *UserConsentSpecifics_UnifiedConsent:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnifiedConsent); err != nil {
			return err
		}
	case *UserConsentSpecifics_AssistantActivityControlConsent:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AssistantActivityControlConsent); err != nil {
			return err
		}
	case *UserConsentSpecifics_AccountPasswordsConsent:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AccountPasswordsConsent); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UserConsentSpecifics.Consent has unexpected type %T", x)
	}
	return nil
}

func _UserConsentSpecifics_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UserConsentSpecifics)
	switch tag {
	case 7: // consent.sync_consent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserConsentTypes_SyncConsent)
		err := b.DecodeMessage(msg)
		m.Consent = &UserConsentSpecifics_SyncConsent{msg}
		return true, err
	case 8: // consent.arc_backup_and_restore_consent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserConsentTypes_ArcBackupAndRestoreConsent)
		err := b.DecodeMessage(msg)
		m.Consent = &UserConsentSpecifics_ArcBackupAndRestoreConsent{msg}
		return true, err
	case 9: // consent.arc_location_service_consent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserConsentTypes_ArcGoogleLocationServiceConsent)
		err := b.DecodeMessage(msg)
		m.Consent = &UserConsentSpecifics_ArcLocationServiceConsent{msg}
		return true, err
	case 10: // consent.arc_play_terms_of_service_consent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserConsentTypes_ArcPlayTermsOfServiceConsent)
		err := b.DecodeMessage(msg)
		m.Consent = &UserConsentSpecifics_ArcPlayTermsOfServiceConsent{msg}
		return true, err
	case 13: // consent.unified_consent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserConsentTypes_UnifiedConsent)
		err := b.DecodeMessage(msg)
		m.Consent = &UserConsentSpecifics_UnifiedConsent{msg}
		return true, err
	case 14: // consent.assistant_activity_control_consent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserConsentTypes_AssistantActivityControlConsent)
		err := b.DecodeMessage(msg)
		m.Consent = &UserConsentSpecifics_AssistantActivityControlConsent{msg}
		return true, err
	case 15: // consent.account_passwords_consent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserConsentTypes_AccountPasswordsConsent)
		err := b.DecodeMessage(msg)
		m.Consent = &UserConsentSpecifics_AccountPasswordsConsent{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UserConsentSpecifics_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UserConsentSpecifics)
	// consent
	switch x := m.Consent.(type) {
	case *UserConsentSpecifics_SyncConsent:
		s := proto.Size(x.SyncConsent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UserConsentSpecifics_ArcBackupAndRestoreConsent:
		s := proto.Size(x.ArcBackupAndRestoreConsent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UserConsentSpecifics_ArcLocationServiceConsent:
		s := proto.Size(x.ArcLocationServiceConsent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UserConsentSpecifics_ArcPlayTermsOfServiceConsent:
		s := proto.Size(x.ArcPlayTermsOfServiceConsent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UserConsentSpecifics_UnifiedConsent:
		s := proto.Size(x.UnifiedConsent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UserConsentSpecifics_AssistantActivityControlConsent:
		s := proto.Size(x.AssistantActivityControlConsent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UserConsentSpecifics_AccountPasswordsConsent:
		s := proto.Size(x.AccountPasswordsConsent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*UserConsentSpecifics)(nil), "sync_pb.UserConsentSpecifics")
	proto.RegisterEnum("sync_pb.UserConsentSpecifics_Feature", UserConsentSpecifics_Feature_name, UserConsentSpecifics_Feature_value)
}

func init() {
	proto.RegisterFile("components/sync/protocol/user_consent_specifics.proto", fileDescriptor_user_consent_specifics_55b9f153f9ec65b9)
}

var fileDescriptor_user_consent_specifics_55b9f153f9ec65b9 = []byte{
	// 751 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0x8e, 0xe2, 0x24, 0x6e, 0xe8, 0xcc, 0xf1, 0xd8, 0x2d, 0x51, 0xbd, 0xb5, 0xf3, 0x02, 0x14,
	0x33, 0x30, 0xc0, 0x41, 0x8b, 0xfd, 0x60, 0x97, 0xb2, 0xaa, 0xd8, 0xea, 0x3c, 0xc9, 0x90, 0xe4,
	0x0e, 0xb9, 0x22, 0x58, 0x8a, 0xf6, 0x88, 0x49, 0xa2, 0x40, 0x52, 0x1d, 0x3c, 0xec, 0x66, 0x77,
	0x7b, 0xa0, 0x3d, 0xdf, 0x30, 0x88, 0x92, 0x6c, 0x0f, 0x8d, 0xbd, 0x5e, 0xf2, 0x7c, 0xe7, 0xfb,
	0xe1, 0x01, 0x0f, 0xc1, 0xb7, 0x84, 0xa7, 0x39, 0xcf, 0x68, 0xa6, 0xe4, 0xad, 0x5c, 0x67, 0xe4,
	0x36, 0x17, 0x5c, 0x71, 0xc2, 0x93, 0xdb, 0x42, 0x52, 0x81, 0x08, 0xcf, 0x24, 0xcd, 0x14, 0x92,
	0x39, 0x25, 0x6c, 0xc9, 0x88, 0x1c, 0x69, 0x1c, 0xb6, 0xcb, 0x5e, 0x94, 0xbf, 0xed, 0xbf, 0xf8,
	0x30, 0xbe, 0x5a, 0xe7, 0xb4, 0xe6, 0xde, 0xfc, 0x03, 0xc0, 0x27, 0x0b, 0x49, 0x85, 0x5d, 0x61,
	0x61, 0x23, 0x0d, 0xaf, 0xc0, 0x59, 0xc2, 0x09, 0x4e, 0xa8, 0x79, 0x32, 0x30, 0x86, 0xe7, 0x41,
	0x7d, 0x82, 0xdf, 0x03, 0x93, 0x24, 0xac, 0x94, 0xd9, 0xc8, 0xb1, 0x94, 0xa2, 0x42, 0x52, 0x62,
	0x5e, 0x0c, 0x8c, 0x61, 0x2b, 0xf8, 0xb4, 0xc2, 0x6b, 0xc5, 0x88, 0xa5, 0x74, 0x21, 0x29, 0x81,
	0xaf, 0xc1, 0x85, 0xce, 0x59, 0xd3, 0xcc, 0xf6, 0xc0, 0x18, 0x76, 0x5e, 0x3e, 0x1f, 0xd5, 0xe1,
	0x47, 0x3b, 0x29, 0x22, 0x1d, 0x30, 0x5c, 0x67, 0xa4, 0x2e, 0x4c, 0x8f, 0x82, 0x8e, 0xdc, 0x1e,
	0xe1, 0xef, 0xe0, 0x19, 0x16, 0x04, 0xbd, 0xc5, 0xe4, 0xd7, 0x22, 0x47, 0x38, 0x8b, 0x91, 0xa0,
	0x52, 0x71, 0x41, 0x37, 0xea, 0x8f, 0xb4, 0xfa, 0x37, 0xfb, 0xd5, 0x2d, 0x41, 0xc6, 0x9a, 0x6e,
	0x65, 0x71, 0x50, 0x91, 0xb7, 0x66, 0x7d, 0xbc, 0x17, 0x85, 0x7f, 0x80, 0xcf, 0x4b, 0xef, 0x72,
	0x1c, 0x8a, 0xf1, 0x0c, 0x49, 0x2a, 0xde, 0x31, 0xb2, 0x75, 0x3e, 0xd7, 0xce, 0x3f, 0x1c, 0x74,
	0x9e, 0x70, 0xbe, 0x4a, 0xe8, 0xac, 0x96, 0x08, 0x2b, 0x85, 0xad, 0xfd, 0x13, 0x2c, 0xc8, 0xc3,
	0x20, 0xfc, 0xd3, 0x00, 0x5f, 0x96, 0xf6, 0x79, 0x82, 0xd7, 0x48, 0x51, 0x91, 0x4a, 0xc4, 0x97,
	0xef, 0x65, 0x00, 0x3a, 0xc3, 0x77, 0x07, 0x33, 0xcc, 0x13, 0xbc, 0x8e, 0x4a, 0x01, 0x7f, 0xf9,
	0x5e, 0x80, 0xf2, 0x86, 0x7b, 0x71, 0xf8, 0x33, 0xb8, 0x2c, 0x32, 0xb6, 0x64, 0x34, 0xde, 0x18,
	0x7e, 0xa4, 0x0d, 0x87, 0xfb, 0x0d, 0x17, 0x15, 0xa1, 0xae, 0x8d, 0x8f, 0x4d, 0x63, 0x7a, 0x14,
	0x74, 0x8b, 0xff, 0x54, 0xe1, 0x5f, 0x06, 0xb8, 0xc1, 0x52, 0x32, 0xa9, 0x70, 0xa6, 0x10, 0x26,
	0x8a, 0xbd, 0x63, 0x6a, 0x5d, 0x9a, 0x28, 0xc1, 0x93, 0x8d, 0x59, 0xf7, 0x7f, 0x27, 0xdc, 0x68,
	0x58, 0xb5, 0x84, 0x5d, 0x29, 0x6c, 0x2f, 0xf8, 0x05, 0x3e, 0xdc, 0x02, 0x39, 0x78, 0x82, 0x09,
	0xe1, 0x45, 0xa6, 0x50, 0x8e, 0xa5, 0xfc, 0x8d, 0x8b, 0x58, 0x6e, 0x02, 0x5c, 0xea, 0x00, 0x2f,
	0x0e, 0x04, 0xa8, 0xa8, 0xf3, 0x86, 0xb9, 0x35, 0xbe, 0xc6, 0x0f, 0x43, 0xf0, 0x29, 0x00, 0x8d,
	0x21, 0x8b, 0xcd, 0x33, 0xbd, 0x73, 0xe7, 0x75, 0xc5, 0x8d, 0xa1, 0x0d, 0xda, 0x4b, 0x8a, 0x55,
	0x21, 0xa8, 0x69, 0x0c, 0x8c, 0x61, 0xf7, 0xe1, 0xc5, 0xd9, 0xac, 0xef, 0xe8, 0xae, 0x6a, 0x2e,
	0x07, 0x1d, 0x34, 0x4c, 0xf8, 0x12, 0x3c, 0x8e, 0xa9, 0x24, 0x82, 0xe5, 0xfa, 0xe5, 0xae, 0x44,
	0x8c, 0x58, 0x2c, 0xcd, 0xe3, 0x41, 0x6b, 0x78, 0xaa, 0x3b, 0x3f, 0xde, 0x81, 0x27, 0x22, 0x76,
	0x63, 0x59, 0x72, 0x08, 0xcf, 0x96, 0x4c, 0xa4, 0x78, 0x87, 0x64, 0xb6, 0x06, 0x46, 0xc3, 0xd9,
	0x85, 0x35, 0x09, 0xda, 0xe0, 0x4c, 0x2a, 0xac, 0x0a, 0x69, 0x9e, 0xea, 0xac, 0x5f, 0xed, 0x9f,
	0x54, 0x13, 0x5c, 0xb7, 0x6b, 0xbd, 0x9a, 0x7a, 0xf3, 0xb7, 0x01, 0xda, 0xf5, 0x2d, 0xe0, 0x35,
	0x78, 0x7c, 0xe7, 0x58, 0xd1, 0x22, 0x70, 0xd0, 0xc2, 0x0b, 0xe7, 0x8e, 0xed, 0xde, 0xb9, 0xce,
	0xab, 0xde, 0x11, 0xbc, 0x04, 0x1d, 0x7b, 0x1a, 0xf8, 0x3f, 0x39, 0x28, 0xbc, 0xf7, 0xec, 0x9e,
	0x01, 0xbb, 0x00, 0xcc, 0x67, 0xd6, 0x3d, 0x0a, 0x23, 0x3f, 0x70, 0x7a, 0xc7, 0xf0, 0x0a, 0xc0,
	0xb1, 0x65, 0xff, 0xb8, 0x98, 0x23, 0xcb, 0x7b, 0x85, 0x02, 0xa7, 0xaa, 0xb7, 0xe0, 0x67, 0xe0,
	0x7a, 0xe2, 0xfb, 0x93, 0x99, 0x83, 0x66, 0xbe, 0x6d, 0x45, 0xae, 0xef, 0xa1, 0xd0, 0x09, 0xde,
	0xb8, 0xb6, 0xd3, 0x3b, 0x81, 0x7d, 0x70, 0x55, 0xab, 0x2e, 0x3c, 0xed, 0x84, 0x6c, 0xdf, 0x0b,
	0x1d, 0x2f, 0xea, 0x9d, 0xc2, 0x67, 0xa0, 0x6f, 0x85, 0xa1, 0x1b, 0x46, 0x96, 0x17, 0x21, 0xcb,
	0x8e, 0xdc, 0x37, 0x6e, 0x74, 0x5f, 0xe2, 0x51, 0xe0, 0xcf, 0x7a, 0x67, 0xe3, 0x73, 0xd0, 0xae,
	0x9f, 0xc9, 0xeb, 0x93, 0x47, 0x9d, 0xde, 0x45, 0xf0, 0xb4, 0x5c, 0xd7, 0x94, 0x2a, 0xc1, 0x88,
	0xd4, 0x5f, 0x55, 0x21, 0xf1, 0x6a, 0xb3, 0xaa, 0xe3, 0xaf, 0xc1, 0x73, 0x2e, 0x56, 0x23, 0xf2,
	0x8b, 0xe0, 0x29, 0x2b, 0xd2, 0xd1, 0xf6, 0x0b, 0xd7, 0x43, 0x1b, 0x35, 0x5f, 0xf8, 0xb4, 0x35,
	0x37, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x01, 0x16, 0x12, 0x21, 0x06, 0x00, 0x00,
}
