// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/sync/protocol/device_info_specifics.proto

package sync_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Enum defining available Sharing features.
type SharingSpecificFields_EnabledFeatures int32

const (
	SharingSpecificFields_UNKNOWN SharingSpecificFields_EnabledFeatures = 0
	// Supports Click to Call only via VAPID.
	SharingSpecificFields_CLICK_TO_CALL_VAPID SharingSpecificFields_EnabledFeatures = 1
	// Supports Shared Clipboard only via VAPID.
	SharingSpecificFields_SHARED_CLIPBOARD_VAPID SharingSpecificFields_EnabledFeatures = 2
	SharingSpecificFields_SMS_FETCHER            SharingSpecificFields_EnabledFeatures = 3
	SharingSpecificFields_REMOTE_COPY            SharingSpecificFields_EnabledFeatures = 4
	SharingSpecificFields_DISCOVERY              SharingSpecificFields_EnabledFeatures = 6
	// Suppots Click to Call via both VAPID and sender ID.
	SharingSpecificFields_CLICK_TO_CALL_V2 SharingSpecificFields_EnabledFeatures = 7
	// Suppots Shared Clipboard via both VAPID and sender ID.
	SharingSpecificFields_SHARED_CLIPBOARD_V2 SharingSpecificFields_EnabledFeatures = 8
)

var SharingSpecificFields_EnabledFeatures_name = map[int32]string{
	0: "UNKNOWN",
	1: "CLICK_TO_CALL_VAPID",
	2: "SHARED_CLIPBOARD_VAPID",
	3: "SMS_FETCHER",
	4: "REMOTE_COPY",
	6: "DISCOVERY",
	7: "CLICK_TO_CALL_V2",
	8: "SHARED_CLIPBOARD_V2",
}
var SharingSpecificFields_EnabledFeatures_value = map[string]int32{
	"UNKNOWN":                0,
	"CLICK_TO_CALL_VAPID":    1,
	"SHARED_CLIPBOARD_VAPID": 2,
	"SMS_FETCHER":            3,
	"REMOTE_COPY":            4,
	"DISCOVERY":              6,
	"CLICK_TO_CALL_V2":       7,
	"SHARED_CLIPBOARD_V2":    8,
}

func (x SharingSpecificFields_EnabledFeatures) Enum() *SharingSpecificFields_EnabledFeatures {
	p := new(SharingSpecificFields_EnabledFeatures)
	*p = x
	return p
}
func (x SharingSpecificFields_EnabledFeatures) String() string {
	return proto.EnumName(SharingSpecificFields_EnabledFeatures_name, int32(x))
}
func (x *SharingSpecificFields_EnabledFeatures) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SharingSpecificFields_EnabledFeatures_value, data, "SharingSpecificFields_EnabledFeatures")
	if err != nil {
		return err
	}
	*x = SharingSpecificFields_EnabledFeatures(value)
	return nil
}
func (SharingSpecificFields_EnabledFeatures) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_device_info_specifics_07feb9c844706bc0, []int{2, 0}
}

// Information about a device that is running a sync-enabled Chrome browser.  We
// are mapping the per-client cache guid to more specific information about the
// device.
type DeviceInfoSpecifics struct {
	// The cache_guid created to identify a sync client on this device.
	CacheGuid *string `protobuf:"bytes,1,opt,name=cache_guid,json=cacheGuid" json:"cache_guid,omitempty"`
	// A non-unique but human readable name to describe this client.
	ClientName *string `protobuf:"bytes,2,opt,name=client_name,json=clientName" json:"client_name,omitempty"`
	// The platform of the device.
	DeviceType *SyncEnums_DeviceType `protobuf:"varint,3,opt,name=device_type,json=deviceType,enum=sync_pb.SyncEnums_DeviceType" json:"device_type,omitempty"`
	// The UserAgent used when contacting the Chrome Sync server.
	// Only present when talking to the HTTP server.
	SyncUserAgent *string `protobuf:"bytes,4,opt,name=sync_user_agent,json=syncUserAgent" json:"sync_user_agent,omitempty"`
	// The Chrome instance's version.  Updated (if necessary) on every startup.
	// DEPRECATED in M92. Still populated for backward compatibility.
	ChromeVersion *string `protobuf:"bytes,5,opt,name=chrome_version,json=chromeVersion" json:"chrome_version,omitempty"` // Deprecated: Do not use.
	// Last time when pre-sync data on the device was saved. The device can be
	// restored to state back to this time. In millisecond since UNIX epoch.
	// DEPRECATED in M50.
	DeprecatedBackupTimestamp *int64 `protobuf:"varint,6,opt,name=deprecated_backup_timestamp,json=deprecatedBackupTimestamp" json:"deprecated_backup_timestamp,omitempty"` // Deprecated: Do not use.
	// Device_id that is stable until user signs out. This device_id is used for
	// annotating login scoped refresh token. Present only for Chrome Clients.
	SigninScopedDeviceId *string `protobuf:"bytes,7,opt,name=signin_scoped_device_id,json=signinScopedDeviceId" json:"signin_scoped_device_id,omitempty"`
	// This field is updated to be the current time periodically, and is also set
	// to the current time whenever another field changes. By examining the
	// difference between this field and the current time, it should be possible
	// to reason about the inactivity of any device that was syncing at one time.
	LastUpdatedTimestamp *int64 `protobuf:"varint,8,opt,name=last_updated_timestamp,json=lastUpdatedTimestamp" json:"last_updated_timestamp,omitempty"`
	// Device info fields that are specific to a feature. This is information that
	// can not be derived from the other fields in the proto and are not general
	// enough to be used by another feature.
	FeatureFields *FeatureSpecificFields `protobuf:"bytes,9,opt,name=feature_fields,json=featureFields" json:"feature_fields,omitempty"`
	// Device specific information for Sharing feature.
	SharingFields *SharingSpecificFields `protobuf:"bytes,10,opt,name=sharing_fields,json=sharingFields" json:"sharing_fields,omitempty"`
	// Model of device.
	Model *string `protobuf:"bytes,11,opt,name=model" json:"model,omitempty"`
	// Name of device manufacturer.
	Manufacturer *string `protobuf:"bytes,12,opt,name=manufacturer" json:"manufacturer,omitempty"`
	// The interval in minutes with which |last_updated_timestamp| is updated to
	// the sync servers if online and while sync is actively running (e.g.
	// excludes backgrounded apps on Android). Introduced in M81. The legacy
	// default was 1 day.
	PulseIntervalInMinutes *int32 `protobuf:"varint,13,opt,name=pulse_interval_in_minutes,json=pulseIntervalInMinutes" json:"pulse_interval_in_minutes,omitempty"`
	// Device specific information for Sync invalidations.
	InvalidationFields *InvalidationSpecificFields `protobuf:"bytes,14,opt,name=invalidation_fields,json=invalidationFields" json:"invalidation_fields,omitempty"`
	// Information for contacting this device in order to perform security key
	// operations.
	PaaskFields *PhoneAsASecurityKeySpecificFields `protobuf:"bytes,15,opt,name=paask_fields,json=paaskFields" json:"paask_fields,omitempty"`
	// Unique hardware identifier string which details the HW combination of
	// a ChromeOS device. This field will be empty on other OS devices.
	FullHardwareClass *string `protobuf:"bytes,16,opt,name=full_hardware_class,json=fullHardwareClass" json:"full_hardware_class,omitempty"`
	// Version information to pin-point which client implementation this is.
	//
	// Types that are valid to be assigned to ClientVersionInfo:
	//	*DeviceInfoSpecifics_ChromeVersionInfo
	//	*DeviceInfoSpecifics_GooglePlayServicesVersionInfo
	ClientVersionInfo    isDeviceInfoSpecifics_ClientVersionInfo `protobuf_oneof:"client_version_info"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *DeviceInfoSpecifics) Reset()         { *m = DeviceInfoSpecifics{} }
func (m *DeviceInfoSpecifics) String() string { return proto.CompactTextString(m) }
func (*DeviceInfoSpecifics) ProtoMessage()    {}
func (*DeviceInfoSpecifics) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_info_specifics_07feb9c844706bc0, []int{0}
}
func (m *DeviceInfoSpecifics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceInfoSpecifics.Unmarshal(m, b)
}
func (m *DeviceInfoSpecifics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceInfoSpecifics.Marshal(b, m, deterministic)
}
func (dst *DeviceInfoSpecifics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceInfoSpecifics.Merge(dst, src)
}
func (m *DeviceInfoSpecifics) XXX_Size() int {
	return xxx_messageInfo_DeviceInfoSpecifics.Size(m)
}
func (m *DeviceInfoSpecifics) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceInfoSpecifics.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceInfoSpecifics proto.InternalMessageInfo

type isDeviceInfoSpecifics_ClientVersionInfo interface {
	isDeviceInfoSpecifics_ClientVersionInfo()
}

type DeviceInfoSpecifics_ChromeVersionInfo struct {
	ChromeVersionInfo *ChromeVersionInfo `protobuf:"bytes,17,opt,name=chrome_version_info,json=chromeVersionInfo,oneof"`
}
type DeviceInfoSpecifics_GooglePlayServicesVersionInfo struct {
	GooglePlayServicesVersionInfo *GooglePlayServicesVersionInfo `protobuf:"bytes,18,opt,name=google_play_services_version_info,json=googlePlayServicesVersionInfo,oneof"`
}

func (*DeviceInfoSpecifics_ChromeVersionInfo) isDeviceInfoSpecifics_ClientVersionInfo()             {}
func (*DeviceInfoSpecifics_GooglePlayServicesVersionInfo) isDeviceInfoSpecifics_ClientVersionInfo() {}

func (m *DeviceInfoSpecifics) GetClientVersionInfo() isDeviceInfoSpecifics_ClientVersionInfo {
	if m != nil {
		return m.ClientVersionInfo
	}
	return nil
}

func (m *DeviceInfoSpecifics) GetCacheGuid() string {
	if m != nil && m.CacheGuid != nil {
		return *m.CacheGuid
	}
	return ""
}

func (m *DeviceInfoSpecifics) GetClientName() string {
	if m != nil && m.ClientName != nil {
		return *m.ClientName
	}
	return ""
}

func (m *DeviceInfoSpecifics) GetDeviceType() SyncEnums_DeviceType {
	if m != nil && m.DeviceType != nil {
		return *m.DeviceType
	}
	return SyncEnums_TYPE_UNSET
}

func (m *DeviceInfoSpecifics) GetSyncUserAgent() string {
	if m != nil && m.SyncUserAgent != nil {
		return *m.SyncUserAgent
	}
	return ""
}

// Deprecated: Do not use.
func (m *DeviceInfoSpecifics) GetChromeVersion() string {
	if m != nil && m.ChromeVersion != nil {
		return *m.ChromeVersion
	}
	return ""
}

// Deprecated: Do not use.
func (m *DeviceInfoSpecifics) GetDeprecatedBackupTimestamp() int64 {
	if m != nil && m.DeprecatedBackupTimestamp != nil {
		return *m.DeprecatedBackupTimestamp
	}
	return 0
}

func (m *DeviceInfoSpecifics) GetSigninScopedDeviceId() string {
	if m != nil && m.SigninScopedDeviceId != nil {
		return *m.SigninScopedDeviceId
	}
	return ""
}

func (m *DeviceInfoSpecifics) GetLastUpdatedTimestamp() int64 {
	if m != nil && m.LastUpdatedTimestamp != nil {
		return *m.LastUpdatedTimestamp
	}
	return 0
}

func (m *DeviceInfoSpecifics) GetFeatureFields() *FeatureSpecificFields {
	if m != nil {
		return m.FeatureFields
	}
	return nil
}

func (m *DeviceInfoSpecifics) GetSharingFields() *SharingSpecificFields {
	if m != nil {
		return m.SharingFields
	}
	return nil
}

func (m *DeviceInfoSpecifics) GetModel() string {
	if m != nil && m.Model != nil {
		return *m.Model
	}
	return ""
}

func (m *DeviceInfoSpecifics) GetManufacturer() string {
	if m != nil && m.Manufacturer != nil {
		return *m.Manufacturer
	}
	return ""
}

func (m *DeviceInfoSpecifics) GetPulseIntervalInMinutes() int32 {
	if m != nil && m.PulseIntervalInMinutes != nil {
		return *m.PulseIntervalInMinutes
	}
	return 0
}

func (m *DeviceInfoSpecifics) GetInvalidationFields() *InvalidationSpecificFields {
	if m != nil {
		return m.InvalidationFields
	}
	return nil
}

func (m *DeviceInfoSpecifics) GetPaaskFields() *PhoneAsASecurityKeySpecificFields {
	if m != nil {
		return m.PaaskFields
	}
	return nil
}

func (m *DeviceInfoSpecifics) GetFullHardwareClass() string {
	if m != nil && m.FullHardwareClass != nil {
		return *m.FullHardwareClass
	}
	return ""
}

func (m *DeviceInfoSpecifics) GetChromeVersionInfo() *ChromeVersionInfo {
	if x, ok := m.GetClientVersionInfo().(*DeviceInfoSpecifics_ChromeVersionInfo); ok {
		return x.ChromeVersionInfo
	}
	return nil
}

func (m *DeviceInfoSpecifics) GetGooglePlayServicesVersionInfo() *GooglePlayServicesVersionInfo {
	if x, ok := m.GetClientVersionInfo().(*DeviceInfoSpecifics_GooglePlayServicesVersionInfo); ok {
		return x.GooglePlayServicesVersionInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DeviceInfoSpecifics) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DeviceInfoSpecifics_OneofMarshaler, _DeviceInfoSpecifics_OneofUnmarshaler, _DeviceInfoSpecifics_OneofSizer, []interface{}{
		(*DeviceInfoSpecifics_ChromeVersionInfo)(nil),
		(*DeviceInfoSpecifics_GooglePlayServicesVersionInfo)(nil),
	}
}

func _DeviceInfoSpecifics_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DeviceInfoSpecifics)
	// client_version_info
	switch x := m.ClientVersionInfo.(type) {
	case *DeviceInfoSpecifics_ChromeVersionInfo:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChromeVersionInfo); err != nil {
			return err
		}
	case *DeviceInfoSpecifics_GooglePlayServicesVersionInfo:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GooglePlayServicesVersionInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DeviceInfoSpecifics.ClientVersionInfo has unexpected type %T", x)
	}
	return nil
}

func _DeviceInfoSpecifics_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DeviceInfoSpecifics)
	switch tag {
	case 17: // client_version_info.chrome_version_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChromeVersionInfo)
		err := b.DecodeMessage(msg)
		m.ClientVersionInfo = &DeviceInfoSpecifics_ChromeVersionInfo{msg}
		return true, err
	case 18: // client_version_info.google_play_services_version_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GooglePlayServicesVersionInfo)
		err := b.DecodeMessage(msg)
		m.ClientVersionInfo = &DeviceInfoSpecifics_GooglePlayServicesVersionInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DeviceInfoSpecifics_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DeviceInfoSpecifics)
	// client_version_info
	switch x := m.ClientVersionInfo.(type) {
	case *DeviceInfoSpecifics_ChromeVersionInfo:
		s := proto.Size(x.ChromeVersionInfo)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DeviceInfoSpecifics_GooglePlayServicesVersionInfo:
		s := proto.Size(x.GooglePlayServicesVersionInfo)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Feature specific information about the device that is running a sync-enabled
// Chrome browser. Adding to this proto is discouraged and should only be added
// when the information can not be derived more generally.
type FeatureSpecificFields struct {
	// Tracks whether the SendTabToSelf feature is enabled on the device. For this
	// to be true, two things must be true: (1) The receiving side of the feature
	// must be enabled on the device (2) The user has enabled sync for this
	// feature
	SendTabToSelfReceivingEnabled *bool    `protobuf:"varint,1,opt,name=send_tab_to_self_receiving_enabled,json=sendTabToSelfReceivingEnabled" json:"send_tab_to_self_receiving_enabled,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *FeatureSpecificFields) Reset()         { *m = FeatureSpecificFields{} }
func (m *FeatureSpecificFields) String() string { return proto.CompactTextString(m) }
func (*FeatureSpecificFields) ProtoMessage()    {}
func (*FeatureSpecificFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_info_specifics_07feb9c844706bc0, []int{1}
}
func (m *FeatureSpecificFields) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureSpecificFields.Unmarshal(m, b)
}
func (m *FeatureSpecificFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureSpecificFields.Marshal(b, m, deterministic)
}
func (dst *FeatureSpecificFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureSpecificFields.Merge(dst, src)
}
func (m *FeatureSpecificFields) XXX_Size() int {
	return xxx_messageInfo_FeatureSpecificFields.Size(m)
}
func (m *FeatureSpecificFields) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureSpecificFields.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureSpecificFields proto.InternalMessageInfo

func (m *FeatureSpecificFields) GetSendTabToSelfReceivingEnabled() bool {
	if m != nil && m.SendTabToSelfReceivingEnabled != nil {
		return *m.SendTabToSelfReceivingEnabled
	}
	return false
}

// Device specific information for Sharing feature. Used to send end-to-end
// encrypted message through FCM to other devices.
type SharingSpecificFields struct {
	// FCM registration token of device subscribed using VAPID key.
	// TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
	VapidFcmToken *string `protobuf:"bytes,1,opt,name=vapid_fcm_token,json=vapidFcmToken" json:"vapid_fcm_token,omitempty"`
	// Public key for message encryption [RFC8291] using VAPID key.
	// TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
	VapidP256Dh []byte `protobuf:"bytes,2,opt,name=vapid_p256dh,json=vapidP256dh" json:"vapid_p256dh,omitempty"`
	// Auth secret for message encryption [RFC8291] using VAPID key.
	// TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
	VapidAuthSecret []byte `protobuf:"bytes,3,opt,name=vapid_auth_secret,json=vapidAuthSecret" json:"vapid_auth_secret,omitempty"`
	// A list of enabled Sharing features.
	EnabledFeatures []SharingSpecificFields_EnabledFeatures `protobuf:"varint,4,rep,name=enabled_features,json=enabledFeatures,enum=sync_pb.SharingSpecificFields_EnabledFeatures" json:"enabled_features,omitempty"`
	// Deprecated. Use sender_id_fcm_token_v2 for new clients.
	SenderIdFcmTokenDeprecated *string `protobuf:"bytes,5,opt,name=sender_id_fcm_token_deprecated,json=senderIdFcmTokenDeprecated" json:"sender_id_fcm_token_deprecated,omitempty"` // Deprecated: Do not use.
	// Deprecated. Use sender_id_p256dh_v2 for new clients.
	SenderIdP256DhDeprecated []byte `protobuf:"bytes,6,opt,name=sender_id_p256dh_deprecated,json=senderIdP256dhDeprecated" json:"sender_id_p256dh_deprecated,omitempty"` // Deprecated: Do not use.
	// Deprecated. Use sender_id_auth_secret_v2 for new clients.
	SenderIdAuthSecretDeprecated []byte `protobuf:"bytes,7,opt,name=sender_id_auth_secret_deprecated,json=senderIdAuthSecretDeprecated" json:"sender_id_auth_secret_deprecated,omitempty"` // Deprecated: Do not use.
	// FCM registration token of device subscribed using Sharing sender ID.
	SenderIdFcmTokenV2 *string `protobuf:"bytes,8,opt,name=sender_id_fcm_token_v2,json=senderIdFcmTokenV2" json:"sender_id_fcm_token_v2,omitempty"`
	// Public key for message encryption [RFC8291] using Sharing sender ID.
	SenderIdP256DhV2 []byte `protobuf:"bytes,9,opt,name=sender_id_p256dh_v2,json=senderIdP256dhV2" json:"sender_id_p256dh_v2,omitempty"`
	// Auth secret for message encryption [RFC8291] using Sharing sender ID.
	SenderIdAuthSecretV2 []byte   `protobuf:"bytes,10,opt,name=sender_id_auth_secret_v2,json=senderIdAuthSecretV2" json:"sender_id_auth_secret_v2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SharingSpecificFields) Reset()         { *m = SharingSpecificFields{} }
func (m *SharingSpecificFields) String() string { return proto.CompactTextString(m) }
func (*SharingSpecificFields) ProtoMessage()    {}
func (*SharingSpecificFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_info_specifics_07feb9c844706bc0, []int{2}
}
func (m *SharingSpecificFields) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SharingSpecificFields.Unmarshal(m, b)
}
func (m *SharingSpecificFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SharingSpecificFields.Marshal(b, m, deterministic)
}
func (dst *SharingSpecificFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SharingSpecificFields.Merge(dst, src)
}
func (m *SharingSpecificFields) XXX_Size() int {
	return xxx_messageInfo_SharingSpecificFields.Size(m)
}
func (m *SharingSpecificFields) XXX_DiscardUnknown() {
	xxx_messageInfo_SharingSpecificFields.DiscardUnknown(m)
}

var xxx_messageInfo_SharingSpecificFields proto.InternalMessageInfo

func (m *SharingSpecificFields) GetVapidFcmToken() string {
	if m != nil && m.VapidFcmToken != nil {
		return *m.VapidFcmToken
	}
	return ""
}

func (m *SharingSpecificFields) GetVapidP256Dh() []byte {
	if m != nil {
		return m.VapidP256Dh
	}
	return nil
}

func (m *SharingSpecificFields) GetVapidAuthSecret() []byte {
	if m != nil {
		return m.VapidAuthSecret
	}
	return nil
}

func (m *SharingSpecificFields) GetEnabledFeatures() []SharingSpecificFields_EnabledFeatures {
	if m != nil {
		return m.EnabledFeatures
	}
	return nil
}

// Deprecated: Do not use.
func (m *SharingSpecificFields) GetSenderIdFcmTokenDeprecated() string {
	if m != nil && m.SenderIdFcmTokenDeprecated != nil {
		return *m.SenderIdFcmTokenDeprecated
	}
	return ""
}

// Deprecated: Do not use.
func (m *SharingSpecificFields) GetSenderIdP256DhDeprecated() []byte {
	if m != nil {
		return m.SenderIdP256DhDeprecated
	}
	return nil
}

// Deprecated: Do not use.
func (m *SharingSpecificFields) GetSenderIdAuthSecretDeprecated() []byte {
	if m != nil {
		return m.SenderIdAuthSecretDeprecated
	}
	return nil
}

func (m *SharingSpecificFields) GetSenderIdFcmTokenV2() string {
	if m != nil && m.SenderIdFcmTokenV2 != nil {
		return *m.SenderIdFcmTokenV2
	}
	return ""
}

func (m *SharingSpecificFields) GetSenderIdP256DhV2() []byte {
	if m != nil {
		return m.SenderIdP256DhV2
	}
	return nil
}

func (m *SharingSpecificFields) GetSenderIdAuthSecretV2() []byte {
	if m != nil {
		return m.SenderIdAuthSecretV2
	}
	return nil
}

// Device specific information telling how to send invalidations to this device.
type InvalidationSpecificFields struct {
	// FCM registration token of device (using Sync sender ID).
	InstanceIdToken *string `protobuf:"bytes,1,opt,name=instance_id_token,json=instanceIdToken" json:"instance_id_token,omitempty"`
	// This device wants to receive only invalidations which are related to these
	// types. The legitimate values of this field correspond to the protobuf field
	// numbers of all EntitySpecifics fields supported by the server (see
	// components/sync/protocol/sync.proto).
	InterestedDataTypeIds []int32  `protobuf:"varint,2,rep,name=interested_data_type_ids,json=interestedDataTypeIds" json:"interested_data_type_ids,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *InvalidationSpecificFields) Reset()         { *m = InvalidationSpecificFields{} }
func (m *InvalidationSpecificFields) String() string { return proto.CompactTextString(m) }
func (*InvalidationSpecificFields) ProtoMessage()    {}
func (*InvalidationSpecificFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_info_specifics_07feb9c844706bc0, []int{3}
}
func (m *InvalidationSpecificFields) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvalidationSpecificFields.Unmarshal(m, b)
}
func (m *InvalidationSpecificFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvalidationSpecificFields.Marshal(b, m, deterministic)
}
func (dst *InvalidationSpecificFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidationSpecificFields.Merge(dst, src)
}
func (m *InvalidationSpecificFields) XXX_Size() int {
	return xxx_messageInfo_InvalidationSpecificFields.Size(m)
}
func (m *InvalidationSpecificFields) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidationSpecificFields.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidationSpecificFields proto.InternalMessageInfo

func (m *InvalidationSpecificFields) GetInstanceIdToken() string {
	if m != nil && m.InstanceIdToken != nil {
		return *m.InstanceIdToken
	}
	return ""
}

func (m *InvalidationSpecificFields) GetInterestedDataTypeIds() []int32 {
	if m != nil {
		return m.InterestedDataTypeIds
	}
	return nil
}

type PhoneAsASecurityKeySpecificFields struct {
	// The encoded tunnel server in the same format as in the BLE advert. See
	// device::cablev2::tunnelserver::DecodeDomain. (Actually a uint16 but
	// proto doesn't have that as a type.)
	TunnelServerDomain *uint32 `protobuf:"varint,1,opt,name=tunnel_server_domain,json=tunnelServerDomain" json:"tunnel_server_domain,omitempty"`
	// An FCM token that can be presented to the tunnel server to contact this
	// device.
	ContactId []byte `protobuf:"bytes,2,opt,name=contact_id,json=contactId" json:"contact_id,omitempty"`
	// A shared secret key, used to enable communication across devices via
	// unauthenticated channels. Knowledge of this secret acts as proof that the
	// remote end is authorized to talk to the device publishing this secret.
	Secret []byte `protobuf:"bytes,3,opt,name=secret" json:"secret,omitempty"`
	// An id that identifies |secret|. This, and |secret|, will be rotated and
	// the ID allows this device to know which |secret| the counterparty is
	// using.
	Id *uint32 `protobuf:"fixed32,4,opt,name=id" json:"id,omitempty"`
	// A P-256, X9.62-encoded public key for this device. Specific to the Chrome
	// instance.
	PeerPublicKeyX962    []byte   `protobuf:"bytes,5,opt,name=peer_public_key_x962,json=peerPublicKeyX962" json:"peer_public_key_x962,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PhoneAsASecurityKeySpecificFields) Reset()         { *m = PhoneAsASecurityKeySpecificFields{} }
func (m *PhoneAsASecurityKeySpecificFields) String() string { return proto.CompactTextString(m) }
func (*PhoneAsASecurityKeySpecificFields) ProtoMessage()    {}
func (*PhoneAsASecurityKeySpecificFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_info_specifics_07feb9c844706bc0, []int{4}
}
func (m *PhoneAsASecurityKeySpecificFields) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhoneAsASecurityKeySpecificFields.Unmarshal(m, b)
}
func (m *PhoneAsASecurityKeySpecificFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhoneAsASecurityKeySpecificFields.Marshal(b, m, deterministic)
}
func (dst *PhoneAsASecurityKeySpecificFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneAsASecurityKeySpecificFields.Merge(dst, src)
}
func (m *PhoneAsASecurityKeySpecificFields) XXX_Size() int {
	return xxx_messageInfo_PhoneAsASecurityKeySpecificFields.Size(m)
}
func (m *PhoneAsASecurityKeySpecificFields) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneAsASecurityKeySpecificFields.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneAsASecurityKeySpecificFields proto.InternalMessageInfo

func (m *PhoneAsASecurityKeySpecificFields) GetTunnelServerDomain() uint32 {
	if m != nil && m.TunnelServerDomain != nil {
		return *m.TunnelServerDomain
	}
	return 0
}

func (m *PhoneAsASecurityKeySpecificFields) GetContactId() []byte {
	if m != nil {
		return m.ContactId
	}
	return nil
}

func (m *PhoneAsASecurityKeySpecificFields) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *PhoneAsASecurityKeySpecificFields) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PhoneAsASecurityKeySpecificFields) GetPeerPublicKeyX962() []byte {
	if m != nil {
		return m.PeerPublicKeyX962
	}
	return nil
}

type ChromeVersionInfo struct {
	// Version number as per https://www.chromium.org/developers/version-numbers.
	VersionNumber        *string  `protobuf:"bytes,1,opt,name=version_number,json=versionNumber" json:"version_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChromeVersionInfo) Reset()         { *m = ChromeVersionInfo{} }
func (m *ChromeVersionInfo) String() string { return proto.CompactTextString(m) }
func (*ChromeVersionInfo) ProtoMessage()    {}
func (*ChromeVersionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_info_specifics_07feb9c844706bc0, []int{5}
}
func (m *ChromeVersionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChromeVersionInfo.Unmarshal(m, b)
}
func (m *ChromeVersionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChromeVersionInfo.Marshal(b, m, deterministic)
}
func (dst *ChromeVersionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChromeVersionInfo.Merge(dst, src)
}
func (m *ChromeVersionInfo) XXX_Size() int {
	return xxx_messageInfo_ChromeVersionInfo.Size(m)
}
func (m *ChromeVersionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChromeVersionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChromeVersionInfo proto.InternalMessageInfo

func (m *ChromeVersionInfo) GetVersionNumber() string {
	if m != nil && m.VersionNumber != nil {
		return *m.VersionNumber
	}
	return ""
}

type GooglePlayServicesVersionInfo struct {
	ApkVersionName       *string  `protobuf:"bytes,1,opt,name=apk_version_name,json=apkVersionName" json:"apk_version_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GooglePlayServicesVersionInfo) Reset()         { *m = GooglePlayServicesVersionInfo{} }
func (m *GooglePlayServicesVersionInfo) String() string { return proto.CompactTextString(m) }
func (*GooglePlayServicesVersionInfo) ProtoMessage()    {}
func (*GooglePlayServicesVersionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_info_specifics_07feb9c844706bc0, []int{6}
}
func (m *GooglePlayServicesVersionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GooglePlayServicesVersionInfo.Unmarshal(m, b)
}
func (m *GooglePlayServicesVersionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GooglePlayServicesVersionInfo.Marshal(b, m, deterministic)
}
func (dst *GooglePlayServicesVersionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GooglePlayServicesVersionInfo.Merge(dst, src)
}
func (m *GooglePlayServicesVersionInfo) XXX_Size() int {
	return xxx_messageInfo_GooglePlayServicesVersionInfo.Size(m)
}
func (m *GooglePlayServicesVersionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GooglePlayServicesVersionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GooglePlayServicesVersionInfo proto.InternalMessageInfo

func (m *GooglePlayServicesVersionInfo) GetApkVersionName() string {
	if m != nil && m.ApkVersionName != nil {
		return *m.ApkVersionName
	}
	return ""
}

func init() {
	proto.RegisterType((*DeviceInfoSpecifics)(nil), "sync_pb.DeviceInfoSpecifics")
	proto.RegisterType((*FeatureSpecificFields)(nil), "sync_pb.FeatureSpecificFields")
	proto.RegisterType((*SharingSpecificFields)(nil), "sync_pb.SharingSpecificFields")
	proto.RegisterType((*InvalidationSpecificFields)(nil), "sync_pb.InvalidationSpecificFields")
	proto.RegisterType((*PhoneAsASecurityKeySpecificFields)(nil), "sync_pb.PhoneAsASecurityKeySpecificFields")
	proto.RegisterType((*ChromeVersionInfo)(nil), "sync_pb.ChromeVersionInfo")
	proto.RegisterType((*GooglePlayServicesVersionInfo)(nil), "sync_pb.GooglePlayServicesVersionInfo")
	proto.RegisterEnum("sync_pb.SharingSpecificFields_EnabledFeatures", SharingSpecificFields_EnabledFeatures_name, SharingSpecificFields_EnabledFeatures_value)
}

func init() {
	proto.RegisterFile("components/sync/protocol/device_info_specifics.proto", fileDescriptor_device_info_specifics_07feb9c844706bc0)
}

var fileDescriptor_device_info_specifics_07feb9c844706bc0 = []byte{
	// 1279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0x5f, 0x73, 0xda, 0xc6,
	0x17, 0x0d, 0xfe, 0xef, 0x0b, 0x06, 0xbc, 0x60, 0x47, 0x71, 0x7e, 0xce, 0x8f, 0xd0, 0x49, 0x86,
	0xa4, 0x53, 0xdc, 0xd1, 0x24, 0xee, 0xa4, 0x0f, 0x9d, 0xc1, 0x80, 0x63, 0xd5, 0x36, 0x30, 0x82,
	0xb8, 0xcd, 0xd3, 0xce, 0x22, 0x2d, 0xb0, 0x63, 0x69, 0xa5, 0xd1, 0x4a, 0xb4, 0x3c, 0xf6, 0xdb,
	0xf4, 0xb3, 0x64, 0xa6, 0xdf, 0xa9, 0xb3, 0x2b, 0x89, 0x7f, 0x76, 0xd2, 0x37, 0xb8, 0xe7, 0xec,
	0xb9, 0xf7, 0xae, 0xf6, 0x9e, 0x5d, 0x78, 0x67, 0x79, 0xae, 0xef, 0x71, 0xca, 0x43, 0x71, 0x26,
	0x66, 0xdc, 0x3a, 0xf3, 0x03, 0x2f, 0xf4, 0x2c, 0xcf, 0x39, 0xb3, 0xe9, 0x94, 0x59, 0x14, 0x33,
	0x3e, 0xf2, 0xb0, 0xf0, 0xa9, 0xc5, 0x46, 0xcc, 0x12, 0x75, 0x05, 0xa3, 0x5d, 0x49, 0xc5, 0xfe,
	0xf0, 0xe4, 0xcd, 0x57, 0x97, 0x2b, 0x06, 0xe5, 0x91, 0x9b, 0xac, 0xa9, 0x7e, 0xd9, 0x83, 0x52,
	0x4b, 0x69, 0x1a, 0x7c, 0xe4, 0xf5, 0x53, 0x45, 0x74, 0x0a, 0x60, 0x11, 0x6b, 0x42, 0xf1, 0x38,
	0x62, 0xb6, 0x96, 0xa9, 0x64, 0x6a, 0xfb, 0xe6, 0xbe, 0x8a, 0x7c, 0x8c, 0x98, 0x8d, 0xfe, 0x0f,
	0x59, 0xcb, 0x61, 0x94, 0x87, 0x98, 0x13, 0x97, 0x6a, 0x1b, 0x0a, 0x87, 0x38, 0xd4, 0x21, 0x2e,
	0x45, 0xbf, 0x40, 0x36, 0x29, 0x35, 0x9c, 0xf9, 0x54, 0xdb, 0xac, 0x64, 0x6a, 0x79, 0xfd, 0xb4,
	0x9e, 0x54, 0x58, 0xef, 0xcf, 0xb8, 0xd5, 0x56, 0x65, 0xc4, 0xc9, 0x07, 0x33, 0x9f, 0x9a, 0x60,
	0xcf, 0x7f, 0xa3, 0xd7, 0x50, 0x50, 0xdc, 0x48, 0xd0, 0x00, 0x93, 0x31, 0xe5, 0xa1, 0xb6, 0xa5,
	0x92, 0x1c, 0xc8, 0xf0, 0x27, 0x41, 0x83, 0x86, 0x0c, 0xa2, 0x37, 0x90, 0xb7, 0x26, 0x81, 0xe7,
	0x52, 0x3c, 0xa5, 0x81, 0x60, 0x1e, 0xd7, 0xb6, 0x25, 0xed, 0x62, 0x43, 0xcb, 0x98, 0x07, 0x31,
	0x72, 0x17, 0x03, 0xe8, 0x02, 0x9e, 0xdb, 0xd4, 0x0f, 0xa8, 0x45, 0x42, 0x6a, 0xe3, 0x21, 0xb1,
	0xee, 0x23, 0x1f, 0x87, 0xcc, 0xa5, 0x22, 0x24, 0xae, 0xaf, 0xed, 0x54, 0x32, 0xb5, 0x4d, 0xb5,
	0xee, 0xd9, 0x82, 0x76, 0xa1, 0x58, 0x83, 0x94, 0x84, 0xde, 0xc3, 0x53, 0xc1, 0xc6, 0x9c, 0x71,
	0x2c, 0x2c, 0xcf, 0xa7, 0x36, 0x4e, 0xbf, 0x87, 0xad, 0xed, 0xaa, 0xf2, 0xca, 0x31, 0xdc, 0x57,
	0x68, 0xb2, 0xb1, 0x36, 0x7a, 0x07, 0xc7, 0x0e, 0x11, 0x21, 0x8e, 0x7c, 0x5b, 0x25, 0x5f, 0x64,
	0xdd, 0x93, 0x59, 0xcd, 0xb2, 0x44, 0x3f, 0xc5, 0xe0, 0x22, 0x59, 0x1b, 0xf2, 0x23, 0x4a, 0xc2,
	0x28, 0xa0, 0x78, 0xc4, 0xa8, 0x63, 0x0b, 0x6d, 0xbf, 0x92, 0xa9, 0x65, 0xf5, 0x17, 0xf3, 0x6d,
	0xbc, 0x8c, 0xe1, 0xf4, 0xb3, 0x5d, 0x2a, 0x96, 0x79, 0x90, 0xac, 0x8a, 0xff, 0x4a, 0x19, 0x31,
	0x21, 0x01, 0xe3, 0xe3, 0x54, 0x06, 0xd6, 0x64, 0xfa, 0x31, 0xbc, 0x2e, 0x93, 0xac, 0x4a, 0x64,
	0xca, 0xb0, 0xed, 0x7a, 0x36, 0x75, 0xb4, 0xac, 0x6a, 0x34, 0xfe, 0x83, 0xaa, 0x90, 0x73, 0x09,
	0x8f, 0x46, 0xc4, 0x92, 0x19, 0x03, 0x2d, 0xa7, 0xc0, 0x95, 0x18, 0xfa, 0x00, 0xcf, 0xfc, 0xc8,
	0x11, 0xf2, 0xd4, 0x86, 0x34, 0x98, 0x12, 0x07, 0x33, 0x8e, 0x5d, 0xc6, 0xa3, 0x90, 0x0a, 0xed,
	0xa0, 0x92, 0xa9, 0x6d, 0x9b, 0xc7, 0x8a, 0x60, 0x24, 0xb8, 0xc1, 0x6f, 0x63, 0x14, 0x0d, 0xa0,
	0xc4, 0xf8, 0x94, 0x38, 0xcc, 0x26, 0x21, 0xf3, 0x78, 0xda, 0x40, 0x5e, 0x35, 0xf0, 0xdd, 0xbc,
	0x01, 0x63, 0x89, 0xb3, 0xd6, 0x05, 0x5a, 0x5e, 0x9f, 0xb4, 0x72, 0x0b, 0x39, 0x9f, 0x10, 0x71,
	0x9f, 0xca, 0x15, 0x94, 0xdc, 0xdb, 0xb9, 0x5c, 0x6f, 0xe2, 0x71, 0xda, 0x10, 0x8d, 0x3e, 0xb5,
	0xa2, 0x80, 0x85, 0xb3, 0x6b, 0x3a, 0x5b, 0x53, 0xcd, 0xaa, 0xf5, 0x89, 0x5c, 0x1d, 0x4a, 0xa3,
	0xc8, 0x71, 0xf0, 0x84, 0x04, 0xf6, 0x1f, 0x24, 0xa0, 0xd8, 0x72, 0x88, 0x10, 0x5a, 0x51, 0x6d,
	0xc5, 0xa1, 0x84, 0xae, 0x12, 0xa4, 0x29, 0x01, 0x74, 0x03, 0xa5, 0xd5, 0x33, 0xab, 0xc6, 0x59,
	0x3b, 0x54, 0x55, 0x9c, 0xcc, 0xab, 0x68, 0x2e, 0x9f, 0x5e, 0x39, 0x9d, 0x57, 0x4f, 0xcc, 0x43,
	0x6b, 0x3d, 0x88, 0x02, 0x78, 0x39, 0xf6, 0xbc, 0xb1, 0x43, 0xb1, 0xef, 0x90, 0x19, 0x16, 0x34,
	0x90, 0x87, 0x4e, 0xac, 0x6a, 0x23, 0xa5, 0xfd, 0x7a, 0xae, 0xfd, 0x51, 0xad, 0xe8, 0x39, 0x64,
	0xd6, 0x4f, 0xf8, 0xab, 0x79, 0x4e, 0xc7, 0xdf, 0x22, 0x5c, 0x1c, 0x41, 0x29, 0x19, 0xff, 0xe5,
	0x2c, 0xd5, 0x21, 0x1c, 0x3d, 0x7a, 0x22, 0x91, 0x01, 0x55, 0x41, 0xb9, 0x8d, 0x43, 0x32, 0xc4,
	0xa1, 0x87, 0x05, 0x75, 0x46, 0x38, 0xa0, 0x16, 0x65, 0x53, 0x79, 0x2a, 0x29, 0x27, 0x43, 0x87,
	0xc6, 0x2e, 0xb3, 0x67, 0x9e, 0x4a, 0xe6, 0x80, 0x0c, 0x07, 0x5e, 0x9f, 0x3a, 0x23, 0x33, 0x65,
	0xb5, 0x63, 0x52, 0xf5, 0xef, 0x1d, 0x38, 0x7a, 0xf4, 0xbc, 0x4a, 0xcb, 0x98, 0x12, 0x9f, 0xd9,
	0x78, 0x64, 0xb9, 0x38, 0xf4, 0xee, 0x29, 0x4f, 0x7c, 0xeb, 0x40, 0x85, 0x2f, 0x2d, 0x77, 0x20,
	0x83, 0xe8, 0x25, 0xe4, 0x62, 0x9e, 0xaf, 0xbf, 0x3f, 0xb7, 0x27, 0xca, 0xbc, 0x72, 0x66, 0x56,
	0xc5, 0x7a, 0x2a, 0x84, 0xde, 0xc2, 0x61, 0x4c, 0x21, 0x51, 0x38, 0xc1, 0x82, 0x5a, 0x01, 0x0d,
	0x95, 0x87, 0xe5, 0xcc, 0x38, 0x47, 0x23, 0x0a, 0x27, 0x7d, 0x15, 0x46, 0x9f, 0xa1, 0x98, 0x34,
	0x80, 0x93, 0xb9, 0x13, 0xda, 0x56, 0x65, 0xb3, 0x96, 0xd7, 0xeb, 0xdf, 0x1e, 0xb0, 0x7a, 0xd2,
	0x52, 0xb2, 0x65, 0xc2, 0x2c, 0xd0, 0xd5, 0x00, 0xba, 0x84, 0x17, 0x72, 0x33, 0x68, 0x80, 0x97,
	0xbb, 0xc2, 0x0b, 0x7b, 0x5a, 0x32, 0xbb, 0x93, 0x98, 0x69, 0xcc, 0xfb, 0x6c, 0xcd, 0x59, 0xa8,
	0x01, 0xcf, 0x17, 0x3a, 0x71, 0xd7, 0xcb, 0x22, 0xd2, 0xf9, 0x72, 0x4a, 0x44, 0x4b, 0x45, 0xe2,
	0x7d, 0x58, 0x92, 0xf8, 0x15, 0x2a, 0x0b, 0x89, 0xa5, 0x5d, 0x59, 0xd6, 0xd9, 0x9d, 0xeb, 0xfc,
	0x2f, 0xd5, 0x59, 0xec, 0xd3, 0x92, 0x96, 0x0e, 0xc7, 0x8f, 0xb5, 0x35, 0xd5, 0x95, 0x1b, 0xee,
	0x9b, 0x68, 0xbd, 0x95, 0x3b, 0x1d, 0xfd, 0x00, 0xa5, 0x07, 0x2d, 0x4c, 0x75, 0x65, 0x88, 0x39,
	0xb3, 0xb8, 0x5a, 0xf6, 0x9d, 0x8e, 0xce, 0x41, 0x7b, 0xbc, 0xdc, 0xa9, 0xae, 0xdc, 0x2f, 0x67,
	0x96, 0x1f, 0x96, 0x78, 0xa7, 0x57, 0xbf, 0x64, 0xa0, 0xb0, 0xf6, 0x59, 0x50, 0x16, 0x76, 0x3f,
	0x75, 0xae, 0x3b, 0xdd, 0xdf, 0x3a, 0xc5, 0x27, 0xe8, 0x29, 0x94, 0x9a, 0x37, 0x46, 0xf3, 0x1a,
	0x0f, 0xba, 0xb8, 0xd9, 0xb8, 0xb9, 0xc1, 0x77, 0x8d, 0x9e, 0xd1, 0x2a, 0x66, 0xd0, 0x09, 0x1c,
	0xf7, 0xaf, 0x1a, 0x66, 0xbb, 0x85, 0x9b, 0x37, 0x46, 0xef, 0xa2, 0xdb, 0x30, 0x5b, 0x09, 0xb6,
	0x81, 0x0a, 0x90, 0xed, 0xdf, 0xf6, 0xf1, 0x65, 0x7b, 0xd0, 0xbc, 0x6a, 0x9b, 0xc5, 0x4d, 0x19,
	0x30, 0xdb, 0xb7, 0xdd, 0x41, 0x1b, 0x37, 0xbb, 0xbd, 0xcf, 0xc5, 0x2d, 0x74, 0x00, 0xfb, 0x2d,
	0xa3, 0xdf, 0xec, 0xde, 0xb5, 0xcd, 0xcf, 0xc5, 0x1d, 0x54, 0x86, 0xe2, 0x5a, 0x16, 0xbd, 0xb8,
	0x2b, 0x73, 0x3f, 0x4c, 0xa1, 0x17, 0xf7, 0xaa, 0x5b, 0x7b, 0xdb, 0xc5, 0xed, 0xb7, 0x85, 0x5e,
	0xbb, 0x6d, 0xe2, 0x66, 0xb7, 0xd3, 0x69, 0x37, 0x07, 0x46, 0xb7, 0x53, 0xfd, 0x2b, 0x03, 0x27,
	0x5f, 0x77, 0x46, 0x79, 0xc8, 0x19, 0x17, 0x21, 0xe1, 0xea, 0xfe, 0x5a, 0x99, 0x98, 0x42, 0x0a,
	0x18, 0x76, 0x3c, 0x33, 0x3f, 0x81, 0xa6, 0xcc, 0x9b, 0x0a, 0x79, 0x7d, 0xd9, 0x24, 0x24, 0xea,
	0x5e, 0xc7, 0xcc, 0x16, 0xda, 0x46, 0x65, 0xb3, 0xb6, 0x6d, 0x1e, 0x2d, 0xf0, 0x16, 0x09, 0x89,
	0xbc, 0xc4, 0x0d, 0x5b, 0x54, 0xff, 0xc9, 0xc0, 0xcb, 0xff, 0xb4, 0x53, 0xf4, 0x23, 0x94, 0xc3,
	0x88, 0x73, 0xea, 0x28, 0xfb, 0xa2, 0x01, 0xb6, 0x3d, 0x97, 0xb0, 0xb8, 0x9a, 0x03, 0x13, 0xc5,
	0x58, 0x5f, 0x41, 0x2d, 0x85, 0xa8, 0xf7, 0x89, 0xc7, 0x43, 0x62, 0x85, 0xf2, 0xee, 0x8d, 0x47,
	0x78, 0x3f, 0x89, 0x18, 0x36, 0x3a, 0x86, 0x9d, 0x95, 0xa9, 0x4d, 0xfe, 0xa1, 0x3c, 0x6c, 0x30,
	0x5b, 0xbd, 0x24, 0x76, 0xcd, 0x0d, 0x66, 0xa3, 0x33, 0x28, 0xfb, 0x94, 0x06, 0xd8, 0x8f, 0x86,
	0x0e, 0xb3, 0xf0, 0x3d, 0x9d, 0xe1, 0x3f, 0x3f, 0x9c, 0xeb, 0x6a, 0xae, 0x72, 0xe6, 0xa1, 0xc4,
	0x7a, 0x0a, 0xba, 0xa6, 0xb3, 0xdf, 0x3f, 0x9c, 0xeb, 0xd5, 0x9f, 0xe1, 0xf0, 0x81, 0x2f, 0xa3,
	0x57, 0x90, 0x4f, 0x7d, 0x90, 0x47, 0xee, 0x90, 0x06, 0x73, 0xe3, 0x89, 0xa3, 0x1d, 0x15, 0xac,
	0x1a, 0x70, 0xfa, 0x4d, 0xdf, 0x45, 0x35, 0x28, 0x12, 0xff, 0x7e, 0xee, 0xa9, 0xea, 0x69, 0x15,
	0x2b, 0xe5, 0x89, 0x7f, 0x9f, 0x30, 0xe5, 0xf3, 0xea, 0xe2, 0x7b, 0x78, 0xe5, 0x05, 0xe3, 0xba,
	0xba, 0x0d, 0x58, 0xe4, 0xd6, 0x17, 0x0f, 0x3e, 0xe5, 0x39, 0xf5, 0xf4, 0xc1, 0x77, 0xb5, 0xd9,
	0xcb, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x83, 0x19, 0x58, 0x6c, 0x4e, 0x0a, 0x00, 0x00,
}
