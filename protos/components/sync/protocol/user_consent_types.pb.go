// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/sync/protocol/user_consent_types.proto

package sync_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The status of a particular User Consent. The status describes the state
// of the consent as it is: given, not_given.
type UserConsentTypes_ConsentStatus int32

const (
	// The status is unspecified e.g. because the user was not asked to
	// consent yet or an error happened or the decision was delayed.
	UserConsentTypes_CONSENT_STATUS_UNSPECIFIED UserConsentTypes_ConsentStatus = 0
	// The consent is not given. This means the user either revoked the
	// consent or did not grant it in the first place.
	UserConsentTypes_NOT_GIVEN UserConsentTypes_ConsentStatus = 1
	// The consent is given. This means the user did grant the consent.
	UserConsentTypes_GIVEN UserConsentTypes_ConsentStatus = 2
)

var UserConsentTypes_ConsentStatus_name = map[int32]string{
	0: "CONSENT_STATUS_UNSPECIFIED",
	1: "NOT_GIVEN",
	2: "GIVEN",
}
var UserConsentTypes_ConsentStatus_value = map[string]int32{
	"CONSENT_STATUS_UNSPECIFIED": 0,
	"NOT_GIVEN":                  1,
	"GIVEN":                      2,
}

func (x UserConsentTypes_ConsentStatus) Enum() *UserConsentTypes_ConsentStatus {
	p := new(UserConsentTypes_ConsentStatus)
	*p = x
	return p
}
func (x UserConsentTypes_ConsentStatus) String() string {
	return proto.EnumName(UserConsentTypes_ConsentStatus_name, int32(x))
}
func (x *UserConsentTypes_ConsentStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UserConsentTypes_ConsentStatus_value, data, "UserConsentTypes_ConsentStatus")
	if err != nil {
		return err
	}
	*x = UserConsentTypes_ConsentStatus(value)
	return nil
}
func (UserConsentTypes_ConsentStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_user_consent_types_2e8f2dffbd348113, []int{0, 0}
}

// Enum describing different user flow during which the ARC Play Terms of
// service consent can be recorded.
type UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow int32

const (
	// The ARC setup flow on a CROS device.
	UserConsentTypes_ArcPlayTermsOfServiceConsent_SETUP UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow = 1
	// The user flow for changing the ARC setting on a CROS device.
	UserConsentTypes_ArcPlayTermsOfServiceConsent_SETTING_CHANGE UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow = 2
)

var UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_name = map[int32]string{
	1: "SETUP",
	2: "SETTING_CHANGE",
}
var UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_value = map[string]int32{
	"SETUP":          1,
	"SETTING_CHANGE": 2,
}

func (x UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow) Enum() *UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow {
	p := new(UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow)
	*p = x
	return p
}
func (x UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow) String() string {
	return proto.EnumName(UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_name, int32(x))
}
func (x *UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_value, data, "UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow")
	if err != nil {
		return err
	}
	*x = UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow(value)
	return nil
}
func (UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_user_consent_types_2e8f2dffbd348113, []int{0, 2, 0}
}

// Enum denoting different Assistant activity control setting type.
type UserConsentTypes_AssistantActivityControlConsent_SettingType int32

const (
	// Legacy clients (< M93) did not set a SettingType; for those,
	// UNSPECIFIED should be interpreted as ALL. Newer clients should always
	// set it explicitly.
	UserConsentTypes_AssistantActivityControlConsent_SETTING_TYPE_UNSPECIFIED UserConsentTypes_AssistantActivityControlConsent_SettingType = 0
	// All Settings.
	UserConsentTypes_AssistantActivityControlConsent_ALL                  UserConsentTypes_AssistantActivityControlConsent_SettingType = 1
	UserConsentTypes_AssistantActivityControlConsent_WEB_AND_APP_ACTIVITY UserConsentTypes_AssistantActivityControlConsent_SettingType = 2
	UserConsentTypes_AssistantActivityControlConsent_DEVICE_APPS          UserConsentTypes_AssistantActivityControlConsent_SettingType = 3
)

var UserConsentTypes_AssistantActivityControlConsent_SettingType_name = map[int32]string{
	0: "SETTING_TYPE_UNSPECIFIED",
	1: "ALL",
	2: "WEB_AND_APP_ACTIVITY",
	3: "DEVICE_APPS",
}
var UserConsentTypes_AssistantActivityControlConsent_SettingType_value = map[string]int32{
	"SETTING_TYPE_UNSPECIFIED": 0,
	"ALL":                      1,
	"WEB_AND_APP_ACTIVITY":     2,
	"DEVICE_APPS":              3,
}

func (x UserConsentTypes_AssistantActivityControlConsent_SettingType) Enum() *UserConsentTypes_AssistantActivityControlConsent_SettingType {
	p := new(UserConsentTypes_AssistantActivityControlConsent_SettingType)
	*p = x
	return p
}
func (x UserConsentTypes_AssistantActivityControlConsent_SettingType) String() string {
	return proto.EnumName(UserConsentTypes_AssistantActivityControlConsent_SettingType_name, int32(x))
}
func (x *UserConsentTypes_AssistantActivityControlConsent_SettingType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UserConsentTypes_AssistantActivityControlConsent_SettingType_value, data, "UserConsentTypes_AssistantActivityControlConsent_SettingType")
	if err != nil {
		return err
	}
	*x = UserConsentTypes_AssistantActivityControlConsent_SettingType(value)
	return nil
}
func (UserConsentTypes_AssistantActivityControlConsent_SettingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_user_consent_types_2e8f2dffbd348113, []int{0, 5, 0}
}

type UserConsentTypes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserConsentTypes) Reset()         { *m = UserConsentTypes{} }
func (m *UserConsentTypes) String() string { return proto.CompactTextString(m) }
func (*UserConsentTypes) ProtoMessage()    {}
func (*UserConsentTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_consent_types_2e8f2dffbd348113, []int{0}
}
func (m *UserConsentTypes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserConsentTypes.Unmarshal(m, b)
}
func (m *UserConsentTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserConsentTypes.Marshal(b, m, deterministic)
}
func (dst *UserConsentTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserConsentTypes.Merge(dst, src)
}
func (m *UserConsentTypes) XXX_Size() int {
	return xxx_messageInfo_UserConsentTypes.Size(m)
}
func (m *UserConsentTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_UserConsentTypes.DiscardUnknown(m)
}

var xxx_messageInfo_UserConsentTypes proto.InternalMessageInfo

// The user consent for the ARC Backup And Restore feature. The consent
// status is determined by the corresponding setting on the ARC setup dialog.
type UserConsentTypes_ArcBackupAndRestoreConsent struct {
	// Ids of the strings of the setting text presented to the user.
	DescriptionGrdIds []int32 `protobuf:"varint,1,rep,name=description_grd_ids,json=descriptionGrdIds" json:"description_grd_ids,omitempty"`
	// Id of the string of the UI element the user clicked when consenting.
	ConfirmationGrdId    *int32                          `protobuf:"varint,2,opt,name=confirmation_grd_id,json=confirmationGrdId" json:"confirmation_grd_id,omitempty"`
	Status               *UserConsentTypes_ConsentStatus `protobuf:"varint,3,opt,name=status,enum=sync_pb.UserConsentTypes_ConsentStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *UserConsentTypes_ArcBackupAndRestoreConsent) Reset() {
	*m = UserConsentTypes_ArcBackupAndRestoreConsent{}
}
func (m *UserConsentTypes_ArcBackupAndRestoreConsent) String() string {
	return proto.CompactTextString(m)
}
func (*UserConsentTypes_ArcBackupAndRestoreConsent) ProtoMessage() {}
func (*UserConsentTypes_ArcBackupAndRestoreConsent) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_consent_types_2e8f2dffbd348113, []int{0, 0}
}
func (m *UserConsentTypes_ArcBackupAndRestoreConsent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserConsentTypes_ArcBackupAndRestoreConsent.Unmarshal(m, b)
}
func (m *UserConsentTypes_ArcBackupAndRestoreConsent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserConsentTypes_ArcBackupAndRestoreConsent.Marshal(b, m, deterministic)
}
func (dst *UserConsentTypes_ArcBackupAndRestoreConsent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserConsentTypes_ArcBackupAndRestoreConsent.Merge(dst, src)
}
func (m *UserConsentTypes_ArcBackupAndRestoreConsent) XXX_Size() int {
	return xxx_messageInfo_UserConsentTypes_ArcBackupAndRestoreConsent.Size(m)
}
func (m *UserConsentTypes_ArcBackupAndRestoreConsent) XXX_DiscardUnknown() {
	xxx_messageInfo_UserConsentTypes_ArcBackupAndRestoreConsent.DiscardUnknown(m)
}

var xxx_messageInfo_UserConsentTypes_ArcBackupAndRestoreConsent proto.InternalMessageInfo

func (m *UserConsentTypes_ArcBackupAndRestoreConsent) GetDescriptionGrdIds() []int32 {
	if m != nil {
		return m.DescriptionGrdIds
	}
	return nil
}

func (m *UserConsentTypes_ArcBackupAndRestoreConsent) GetConfirmationGrdId() int32 {
	if m != nil && m.ConfirmationGrdId != nil {
		return *m.ConfirmationGrdId
	}
	return 0
}

func (m *UserConsentTypes_ArcBackupAndRestoreConsent) GetStatus() UserConsentTypes_ConsentStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return UserConsentTypes_CONSENT_STATUS_UNSPECIFIED
}

// The user consent for the Google Location Service. The consent status is
// determined by the corresponding setting on the ARC setup dialog.
type UserConsentTypes_ArcGoogleLocationServiceConsent struct {
	// Ids of the strings of the setting text presented to the user.
	DescriptionGrdIds []int32 `protobuf:"varint,1,rep,name=description_grd_ids,json=descriptionGrdIds" json:"description_grd_ids,omitempty"`
	// Id of the string of the UI element the user clicked when consenting.
	ConfirmationGrdId    *int32                          `protobuf:"varint,2,opt,name=confirmation_grd_id,json=confirmationGrdId" json:"confirmation_grd_id,omitempty"`
	Status               *UserConsentTypes_ConsentStatus `protobuf:"varint,3,opt,name=status,enum=sync_pb.UserConsentTypes_ConsentStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *UserConsentTypes_ArcGoogleLocationServiceConsent) Reset() {
	*m = UserConsentTypes_ArcGoogleLocationServiceConsent{}
}
func (m *UserConsentTypes_ArcGoogleLocationServiceConsent) String() string {
	return proto.CompactTextString(m)
}
func (*UserConsentTypes_ArcGoogleLocationServiceConsent) ProtoMessage() {}
func (*UserConsentTypes_ArcGoogleLocationServiceConsent) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_consent_types_2e8f2dffbd348113, []int{0, 1}
}
func (m *UserConsentTypes_ArcGoogleLocationServiceConsent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserConsentTypes_ArcGoogleLocationServiceConsent.Unmarshal(m, b)
}
func (m *UserConsentTypes_ArcGoogleLocationServiceConsent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserConsentTypes_ArcGoogleLocationServiceConsent.Marshal(b, m, deterministic)
}
func (dst *UserConsentTypes_ArcGoogleLocationServiceConsent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserConsentTypes_ArcGoogleLocationServiceConsent.Merge(dst, src)
}
func (m *UserConsentTypes_ArcGoogleLocationServiceConsent) XXX_Size() int {
	return xxx_messageInfo_UserConsentTypes_ArcGoogleLocationServiceConsent.Size(m)
}
func (m *UserConsentTypes_ArcGoogleLocationServiceConsent) XXX_DiscardUnknown() {
	xxx_messageInfo_UserConsentTypes_ArcGoogleLocationServiceConsent.DiscardUnknown(m)
}

var xxx_messageInfo_UserConsentTypes_ArcGoogleLocationServiceConsent proto.InternalMessageInfo

func (m *UserConsentTypes_ArcGoogleLocationServiceConsent) GetDescriptionGrdIds() []int32 {
	if m != nil {
		return m.DescriptionGrdIds
	}
	return nil
}

func (m *UserConsentTypes_ArcGoogleLocationServiceConsent) GetConfirmationGrdId() int32 {
	if m != nil && m.ConfirmationGrdId != nil {
		return *m.ConfirmationGrdId
	}
	return 0
}

func (m *UserConsentTypes_ArcGoogleLocationServiceConsent) GetStatus() UserConsentTypes_ConsentStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return UserConsentTypes_CONSENT_STATUS_UNSPECIFIED
}

// The user consent for the Play terms of service is determined by the user
// action on the ARC setup dialog that presents the Play Terms of Service.
type UserConsentTypes_ArcPlayTermsOfServiceConsent struct {
	// The length of the UTF-8 encoded string of the Play Terms of Service
	// text. The length is given in number of bytes.
	PlayTermsOfServiceTextLength *int32 `protobuf:"varint,1,opt,name=play_terms_of_service_text_length,json=playTermsOfServiceTextLength" json:"play_terms_of_service_text_length,omitempty"`
	// The SHA1 hash of UTF-8 encoded string of the Play Terms of Service
	// displayed to the user.
	PlayTermsOfServiceHash []byte `protobuf:"bytes,2,opt,name=play_terms_of_service_hash,json=playTermsOfServiceHash" json:"play_terms_of_service_hash,omitempty"`
	// GRD Ids of the strings on the consent UI that was shown to the user.
	DescriptionGrdIds []int32 `protobuf:"varint,5,rep,name=description_grd_ids,json=descriptionGrdIds" json:"description_grd_ids,omitempty"`
	// Id of the string of the UI element the user clicked when consenting.
	ConfirmationGrdId *int32 `protobuf:"varint,3,opt,name=confirmation_grd_id,json=confirmationGrdId" json:"confirmation_grd_id,omitempty"`
	// The status of the Play Terms of Service consent. This specifies whether
	// the consent was given or not given/revoked.
	Status *UserConsentTypes_ConsentStatus `protobuf:"varint,4,opt,name=status,enum=sync_pb.UserConsentTypes_ConsentStatus" json:"status,omitempty"`
	// The user flow during which the consent was recorded. This is necessary in
	// order to create the correct UI context and Event for the backend.
	ConsentFlow          *UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow `protobuf:"varint,6,opt,name=consent_flow,json=consentFlow,enum=sync_pb.UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow" json:"consent_flow,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                   `json:"-"`
	XXX_unrecognized     []byte                                                     `json:"-"`
	XXX_sizecache        int32                                                      `json:"-"`
}

func (m *UserConsentTypes_ArcPlayTermsOfServiceConsent) Reset() {
	*m = UserConsentTypes_ArcPlayTermsOfServiceConsent{}
}
func (m *UserConsentTypes_ArcPlayTermsOfServiceConsent) String() string {
	return proto.CompactTextString(m)
}
func (*UserConsentTypes_ArcPlayTermsOfServiceConsent) ProtoMessage() {}
func (*UserConsentTypes_ArcPlayTermsOfServiceConsent) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_consent_types_2e8f2dffbd348113, []int{0, 2}
}
func (m *UserConsentTypes_ArcPlayTermsOfServiceConsent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserConsentTypes_ArcPlayTermsOfServiceConsent.Unmarshal(m, b)
}
func (m *UserConsentTypes_ArcPlayTermsOfServiceConsent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserConsentTypes_ArcPlayTermsOfServiceConsent.Marshal(b, m, deterministic)
}
func (dst *UserConsentTypes_ArcPlayTermsOfServiceConsent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserConsentTypes_ArcPlayTermsOfServiceConsent.Merge(dst, src)
}
func (m *UserConsentTypes_ArcPlayTermsOfServiceConsent) XXX_Size() int {
	return xxx_messageInfo_UserConsentTypes_ArcPlayTermsOfServiceConsent.Size(m)
}
func (m *UserConsentTypes_ArcPlayTermsOfServiceConsent) XXX_DiscardUnknown() {
	xxx_messageInfo_UserConsentTypes_ArcPlayTermsOfServiceConsent.DiscardUnknown(m)
}

var xxx_messageInfo_UserConsentTypes_ArcPlayTermsOfServiceConsent proto.InternalMessageInfo

func (m *UserConsentTypes_ArcPlayTermsOfServiceConsent) GetPlayTermsOfServiceTextLength() int32 {
	if m != nil && m.PlayTermsOfServiceTextLength != nil {
		return *m.PlayTermsOfServiceTextLength
	}
	return 0
}

func (m *UserConsentTypes_ArcPlayTermsOfServiceConsent) GetPlayTermsOfServiceHash() []byte {
	if m != nil {
		return m.PlayTermsOfServiceHash
	}
	return nil
}

func (m *UserConsentTypes_ArcPlayTermsOfServiceConsent) GetDescriptionGrdIds() []int32 {
	if m != nil {
		return m.DescriptionGrdIds
	}
	return nil
}

func (m *UserConsentTypes_ArcPlayTermsOfServiceConsent) GetConfirmationGrdId() int32 {
	if m != nil && m.ConfirmationGrdId != nil {
		return *m.ConfirmationGrdId
	}
	return 0
}

func (m *UserConsentTypes_ArcPlayTermsOfServiceConsent) GetStatus() UserConsentTypes_ConsentStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return UserConsentTypes_CONSENT_STATUS_UNSPECIFIED
}

func (m *UserConsentTypes_ArcPlayTermsOfServiceConsent) GetConsentFlow() UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow {
	if m != nil && m.ConsentFlow != nil {
		return *m.ConsentFlow
	}
	return UserConsentTypes_ArcPlayTermsOfServiceConsent_SETUP
}

// The User Consent for Chrome Sync is determined by the user action on the
// corresponding Sync Consent dialog.
type UserConsentTypes_SyncConsent struct {
	// Ids of the strings of the sync consent text presented to the user.
	DescriptionGrdIds []int32 `protobuf:"varint,1,rep,name=description_grd_ids,json=descriptionGrdIds" json:"description_grd_ids,omitempty"`
	// Id of the string of the UI element the user clicked in order to confirm
	// and close the sync consent dialog.
	ConfirmationGrdId *int32 `protobuf:"varint,2,opt,name=confirmation_grd_id,json=confirmationGrdId" json:"confirmation_grd_id,omitempty"`
	// The status of the sync consent. This specifies whether the consent was
	// given or not given/revoked.
	Status               *UserConsentTypes_ConsentStatus `protobuf:"varint,3,opt,name=status,enum=sync_pb.UserConsentTypes_ConsentStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *UserConsentTypes_SyncConsent) Reset()         { *m = UserConsentTypes_SyncConsent{} }
func (m *UserConsentTypes_SyncConsent) String() string { return proto.CompactTextString(m) }
func (*UserConsentTypes_SyncConsent) ProtoMessage()    {}
func (*UserConsentTypes_SyncConsent) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_consent_types_2e8f2dffbd348113, []int{0, 3}
}
func (m *UserConsentTypes_SyncConsent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserConsentTypes_SyncConsent.Unmarshal(m, b)
}
func (m *UserConsentTypes_SyncConsent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserConsentTypes_SyncConsent.Marshal(b, m, deterministic)
}
func (dst *UserConsentTypes_SyncConsent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserConsentTypes_SyncConsent.Merge(dst, src)
}
func (m *UserConsentTypes_SyncConsent) XXX_Size() int {
	return xxx_messageInfo_UserConsentTypes_SyncConsent.Size(m)
}
func (m *UserConsentTypes_SyncConsent) XXX_DiscardUnknown() {
	xxx_messageInfo_UserConsentTypes_SyncConsent.DiscardUnknown(m)
}

var xxx_messageInfo_UserConsentTypes_SyncConsent proto.InternalMessageInfo

func (m *UserConsentTypes_SyncConsent) GetDescriptionGrdIds() []int32 {
	if m != nil {
		return m.DescriptionGrdIds
	}
	return nil
}

func (m *UserConsentTypes_SyncConsent) GetConfirmationGrdId() int32 {
	if m != nil && m.ConfirmationGrdId != nil {
		return *m.ConfirmationGrdId
	}
	return 0
}

func (m *UserConsentTypes_SyncConsent) GetStatus() UserConsentTypes_ConsentStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return UserConsentTypes_CONSENT_STATUS_UNSPECIFIED
}

// The unified User Consent for Chrome is determined by the user action on the
// corresponding Chrome Consent dialog.
type UserConsentTypes_UnifiedConsent struct {
	// Ids of the strings of the unified Chrome consent text presented to the
	// user.
	DescriptionGrdIds []int32 `protobuf:"varint,1,rep,name=description_grd_ids,json=descriptionGrdIds" json:"description_grd_ids,omitempty"`
	// Id of the string of the UI element the user clicked in order to confirm
	// and close the unified Chrome consent dialog.
	ConfirmationGrdId *int32 `protobuf:"varint,2,opt,name=confirmation_grd_id,json=confirmationGrdId" json:"confirmation_grd_id,omitempty"`
	// The status of the unified Chrome consent. This specifies whether the
	// consent was given or not given/revoked.
	Status               *UserConsentTypes_ConsentStatus `protobuf:"varint,3,opt,name=status,enum=sync_pb.UserConsentTypes_ConsentStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *UserConsentTypes_UnifiedConsent) Reset()         { *m = UserConsentTypes_UnifiedConsent{} }
func (m *UserConsentTypes_UnifiedConsent) String() string { return proto.CompactTextString(m) }
func (*UserConsentTypes_UnifiedConsent) ProtoMessage()    {}
func (*UserConsentTypes_UnifiedConsent) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_consent_types_2e8f2dffbd348113, []int{0, 4}
}
func (m *UserConsentTypes_UnifiedConsent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserConsentTypes_UnifiedConsent.Unmarshal(m, b)
}
func (m *UserConsentTypes_UnifiedConsent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserConsentTypes_UnifiedConsent.Marshal(b, m, deterministic)
}
func (dst *UserConsentTypes_UnifiedConsent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserConsentTypes_UnifiedConsent.Merge(dst, src)
}
func (m *UserConsentTypes_UnifiedConsent) XXX_Size() int {
	return xxx_messageInfo_UserConsentTypes_UnifiedConsent.Size(m)
}
func (m *UserConsentTypes_UnifiedConsent) XXX_DiscardUnknown() {
	xxx_messageInfo_UserConsentTypes_UnifiedConsent.DiscardUnknown(m)
}

var xxx_messageInfo_UserConsentTypes_UnifiedConsent proto.InternalMessageInfo

func (m *UserConsentTypes_UnifiedConsent) GetDescriptionGrdIds() []int32 {
	if m != nil {
		return m.DescriptionGrdIds
	}
	return nil
}

func (m *UserConsentTypes_UnifiedConsent) GetConfirmationGrdId() int32 {
	if m != nil && m.ConfirmationGrdId != nil {
		return *m.ConfirmationGrdId
	}
	return 0
}

func (m *UserConsentTypes_UnifiedConsent) GetStatus() UserConsentTypes_ConsentStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return UserConsentTypes_CONSENT_STATUS_UNSPECIFIED
}

// The User Consent for Assistant activity control is determined by the user
// action on the Assistant opt-in flow.
type UserConsentTypes_AssistantActivityControlConsent struct {
	// An opaque token to for ui auditing, which strengthens the audit trail.
	UiAuditKey []byte `protobuf:"bytes,1,opt,name=ui_audit_key,json=uiAuditKey" json:"ui_audit_key,omitempty"`
	// The status of the Assistant activity control consent. This specifies
	// whether the consent was given or not given.
	Status *UserConsentTypes_ConsentStatus `protobuf:"varint,2,opt,name=status,enum=sync_pb.UserConsentTypes_ConsentStatus" json:"status,omitempty"`
	// The activity control setting which the consent was given or not given to.
	// Clients before M93 did not set this field. Such consents should be
	// treated as applying to ALL.
	SettingType          *UserConsentTypes_AssistantActivityControlConsent_SettingType `protobuf:"varint,3,opt,name=setting_type,json=settingType,enum=sync_pb.UserConsentTypes_AssistantActivityControlConsent_SettingType" json:"setting_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                      `json:"-"`
	XXX_unrecognized     []byte                                                        `json:"-"`
	XXX_sizecache        int32                                                         `json:"-"`
}

func (m *UserConsentTypes_AssistantActivityControlConsent) Reset() {
	*m = UserConsentTypes_AssistantActivityControlConsent{}
}
func (m *UserConsentTypes_AssistantActivityControlConsent) String() string {
	return proto.CompactTextString(m)
}
func (*UserConsentTypes_AssistantActivityControlConsent) ProtoMessage() {}
func (*UserConsentTypes_AssistantActivityControlConsent) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_consent_types_2e8f2dffbd348113, []int{0, 5}
}
func (m *UserConsentTypes_AssistantActivityControlConsent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserConsentTypes_AssistantActivityControlConsent.Unmarshal(m, b)
}
func (m *UserConsentTypes_AssistantActivityControlConsent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserConsentTypes_AssistantActivityControlConsent.Marshal(b, m, deterministic)
}
func (dst *UserConsentTypes_AssistantActivityControlConsent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserConsentTypes_AssistantActivityControlConsent.Merge(dst, src)
}
func (m *UserConsentTypes_AssistantActivityControlConsent) XXX_Size() int {
	return xxx_messageInfo_UserConsentTypes_AssistantActivityControlConsent.Size(m)
}
func (m *UserConsentTypes_AssistantActivityControlConsent) XXX_DiscardUnknown() {
	xxx_messageInfo_UserConsentTypes_AssistantActivityControlConsent.DiscardUnknown(m)
}

var xxx_messageInfo_UserConsentTypes_AssistantActivityControlConsent proto.InternalMessageInfo

func (m *UserConsentTypes_AssistantActivityControlConsent) GetUiAuditKey() []byte {
	if m != nil {
		return m.UiAuditKey
	}
	return nil
}

func (m *UserConsentTypes_AssistantActivityControlConsent) GetStatus() UserConsentTypes_ConsentStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return UserConsentTypes_CONSENT_STATUS_UNSPECIFIED
}

func (m *UserConsentTypes_AssistantActivityControlConsent) GetSettingType() UserConsentTypes_AssistantActivityControlConsent_SettingType {
	if m != nil && m.SettingType != nil {
		return *m.SettingType
	}
	return UserConsentTypes_AssistantActivityControlConsent_SETTING_TYPE_UNSPECIFIED
}

// The User Consent for downloading and using passwords stored in the user's
// Google Account. Determined during the opt-in flow for the feature.
type UserConsentTypes_AccountPasswordsConsent struct {
	// Ids of the strings of the consent text presented to the user.
	DescriptionGrdIds []int32 `protobuf:"varint,1,rep,name=description_grd_ids,json=descriptionGrdIds" json:"description_grd_ids,omitempty"`
	// Id of the string of the UI element the user clicked in order to confirm
	// the consent dialog.
	ConfirmationGrdId *int32 `protobuf:"varint,2,opt,name=confirmation_grd_id,json=confirmationGrdId" json:"confirmation_grd_id,omitempty"`
	// The status of the consent. This specifies whether the consent was given
	// or not given/revoked.
	Status               *UserConsentTypes_ConsentStatus `protobuf:"varint,3,opt,name=status,enum=sync_pb.UserConsentTypes_ConsentStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *UserConsentTypes_AccountPasswordsConsent) Reset() {
	*m = UserConsentTypes_AccountPasswordsConsent{}
}
func (m *UserConsentTypes_AccountPasswordsConsent) String() string { return proto.CompactTextString(m) }
func (*UserConsentTypes_AccountPasswordsConsent) ProtoMessage()    {}
func (*UserConsentTypes_AccountPasswordsConsent) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_consent_types_2e8f2dffbd348113, []int{0, 6}
}
func (m *UserConsentTypes_AccountPasswordsConsent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserConsentTypes_AccountPasswordsConsent.Unmarshal(m, b)
}
func (m *UserConsentTypes_AccountPasswordsConsent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserConsentTypes_AccountPasswordsConsent.Marshal(b, m, deterministic)
}
func (dst *UserConsentTypes_AccountPasswordsConsent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserConsentTypes_AccountPasswordsConsent.Merge(dst, src)
}
func (m *UserConsentTypes_AccountPasswordsConsent) XXX_Size() int {
	return xxx_messageInfo_UserConsentTypes_AccountPasswordsConsent.Size(m)
}
func (m *UserConsentTypes_AccountPasswordsConsent) XXX_DiscardUnknown() {
	xxx_messageInfo_UserConsentTypes_AccountPasswordsConsent.DiscardUnknown(m)
}

var xxx_messageInfo_UserConsentTypes_AccountPasswordsConsent proto.InternalMessageInfo

func (m *UserConsentTypes_AccountPasswordsConsent) GetDescriptionGrdIds() []int32 {
	if m != nil {
		return m.DescriptionGrdIds
	}
	return nil
}

func (m *UserConsentTypes_AccountPasswordsConsent) GetConfirmationGrdId() int32 {
	if m != nil && m.ConfirmationGrdId != nil {
		return *m.ConfirmationGrdId
	}
	return 0
}

func (m *UserConsentTypes_AccountPasswordsConsent) GetStatus() UserConsentTypes_ConsentStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return UserConsentTypes_CONSENT_STATUS_UNSPECIFIED
}

func init() {
	proto.RegisterType((*UserConsentTypes)(nil), "sync_pb.UserConsentTypes")
	proto.RegisterType((*UserConsentTypes_ArcBackupAndRestoreConsent)(nil), "sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent")
	proto.RegisterType((*UserConsentTypes_ArcGoogleLocationServiceConsent)(nil), "sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent")
	proto.RegisterType((*UserConsentTypes_ArcPlayTermsOfServiceConsent)(nil), "sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent")
	proto.RegisterType((*UserConsentTypes_SyncConsent)(nil), "sync_pb.UserConsentTypes.SyncConsent")
	proto.RegisterType((*UserConsentTypes_UnifiedConsent)(nil), "sync_pb.UserConsentTypes.UnifiedConsent")
	proto.RegisterType((*UserConsentTypes_AssistantActivityControlConsent)(nil), "sync_pb.UserConsentTypes.AssistantActivityControlConsent")
	proto.RegisterType((*UserConsentTypes_AccountPasswordsConsent)(nil), "sync_pb.UserConsentTypes.AccountPasswordsConsent")
	proto.RegisterEnum("sync_pb.UserConsentTypes_ConsentStatus", UserConsentTypes_ConsentStatus_name, UserConsentTypes_ConsentStatus_value)
	proto.RegisterEnum("sync_pb.UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow", UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_name, UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_value)
	proto.RegisterEnum("sync_pb.UserConsentTypes_AssistantActivityControlConsent_SettingType", UserConsentTypes_AssistantActivityControlConsent_SettingType_name, UserConsentTypes_AssistantActivityControlConsent_SettingType_value)
}

func init() {
	proto.RegisterFile("components/sync/protocol/user_consent_types.proto", fileDescriptor_user_consent_types_2e8f2dffbd348113)
}

var fileDescriptor_user_consent_types_2e8f2dffbd348113 = []byte{
	// 649 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xc5, 0x09, 0x6d, 0xd5, 0x49, 0x1a, 0x8c, 0x41, 0x10, 0x45, 0x15, 0x0d, 0x91, 0x10, 0x95,
	0x40, 0xae, 0xe0, 0xc8, 0x05, 0x39, 0xa9, 0x9b, 0x5a, 0x44, 0xae, 0x65, 0x3b, 0x45, 0x3d, 0xad,
	0xcc, 0x7a, 0x93, 0xac, 0xea, 0xec, 0x5a, 0xbb, 0xeb, 0xb6, 0xfe, 0x29, 0x24, 0x38, 0x22, 0x71,
	0xe1, 0x07, 0x38, 0xf3, 0x37, 0xc8, 0x4e, 0xa2, 0x86, 0x96, 0x16, 0xd1, 0x5b, 0x6e, 0x5e, 0xbf,
	0x37, 0xcf, 0x6f, 0x9e, 0x66, 0xbc, 0xf0, 0x06, 0xf3, 0x69, 0xca, 0x19, 0x61, 0x4a, 0xee, 0xc9,
	0x9c, 0xe1, 0xbd, 0x54, 0x70, 0xc5, 0x31, 0x4f, 0xf6, 0x32, 0x49, 0x04, 0xc2, 0x9c, 0x49, 0xc2,
	0x14, 0x52, 0x79, 0x4a, 0xa4, 0x59, 0x62, 0xc6, 0x46, 0xc1, 0x43, 0xe9, 0xa7, 0xce, 0xd7, 0x06,
	0xe8, 0x43, 0x49, 0x44, 0x6f, 0x46, 0x0a, 0x0b, 0x4e, 0xeb, 0xbb, 0x06, 0x2d, 0x4b, 0xe0, 0x6e,
	0x84, 0x4f, 0xb3, 0xd4, 0x62, 0xb1, 0x4f, 0xa4, 0xe2, 0x82, 0xcc, 0x39, 0x86, 0x09, 0x8f, 0x62,
	0x22, 0xb1, 0xa0, 0xa9, 0xa2, 0x9c, 0xa1, 0xb1, 0x88, 0x11, 0x8d, 0x65, 0x53, 0x6b, 0x57, 0x77,
	0xd7, 0xfc, 0x87, 0x4b, 0x50, 0x5f, 0xc4, 0x4e, 0x2c, 0x0b, 0x3e, 0xe6, 0x6c, 0x44, 0xc5, 0x34,
	0x5a, 0x2a, 0x68, 0x56, 0xda, 0x5a, 0xc1, 0x5f, 0x86, 0xca, 0x02, 0xe3, 0x3d, 0xac, 0x4b, 0x15,
	0xa9, 0x4c, 0x36, 0xab, 0x6d, 0x6d, 0xb7, 0xf1, 0xf6, 0xa5, 0x39, 0x77, 0x6b, 0x5e, 0x75, 0x6a,
	0xce, 0x0f, 0x41, 0x49, 0xf7, 0xe7, 0x65, 0xad, 0x1f, 0x1a, 0xec, 0x58, 0x02, 0xf7, 0x39, 0x1f,
	0x27, 0x64, 0xc0, 0x71, 0xa9, 0x1d, 0x10, 0x71, 0x46, 0xf1, 0xea, 0x34, 0xf1, 0xab, 0x0a, 0xdb,
	0x96, 0xc0, 0x5e, 0x12, 0xe5, 0x21, 0x11, 0x53, 0x79, 0x34, 0xba, 0xd2, 0x41, 0x1f, 0x9e, 0xa7,
	0x49, 0x94, 0x23, 0x55, 0xa0, 0x88, 0x8f, 0x90, 0x9c, 0xe1, 0x48, 0x91, 0x0b, 0x85, 0x12, 0xc2,
	0xc6, 0x6a, 0xd2, 0xd4, 0x4a, 0x7f, 0xdb, 0xe9, 0x35, 0x95, 0x90, 0x5c, 0xa8, 0x41, 0xc9, 0x31,
	0xde, 0x41, 0xeb, 0xef, 0x42, 0x93, 0x48, 0x4e, 0xca, 0x0e, 0xeb, 0xfe, 0x93, 0xeb, 0x0a, 0x87,
	0x91, 0x9c, 0xdc, 0x14, 0xe3, 0xda, 0x7f, 0xc6, 0x58, 0xfd, 0x77, 0x8c, 0xf7, 0xef, 0x14, 0xa3,
	0x41, 0xa0, 0xbe, 0x58, 0x80, 0x51, 0xc2, 0xcf, 0x9b, 0xeb, 0xa5, 0x4c, 0xf7, 0x66, 0x99, 0xdb,
	0x32, 0x5f, 0x7c, 0xe3, 0x20, 0xe1, 0xe7, 0x7e, 0x0d, 0x5f, 0x1e, 0x3a, 0xaf, 0xa1, 0xb6, 0x84,
	0x19, 0x9b, 0xb0, 0x16, 0xd8, 0xe1, 0xd0, 0xd3, 0x35, 0xc3, 0x80, 0x46, 0x60, 0x87, 0xa1, 0xe3,
	0xf6, 0x51, 0xef, 0xd0, 0x72, 0xfb, 0xb6, 0x5e, 0x69, 0x7d, 0xd6, 0xa0, 0x16, 0xe4, 0x0c, 0xaf,
	0xcc, 0x30, 0x7e, 0xd1, 0xa0, 0x31, 0x64, 0x74, 0x44, 0x49, 0xbc, 0x32, 0x9e, 0x7f, 0x56, 0x60,
	0xc7, 0x92, 0x92, 0x4a, 0x15, 0x31, 0x65, 0x61, 0x45, 0xcf, 0xa8, 0xca, 0x7b, 0x9c, 0x29, 0xc1,
	0x93, 0x45, 0x13, 0x6d, 0xa8, 0x67, 0x14, 0x45, 0x59, 0x4c, 0x15, 0x3a, 0x25, 0x79, 0xb9, 0x2e,
	0x75, 0x1f, 0x32, 0x6a, 0x15, 0xaf, 0x3e, 0x90, 0x7c, 0xc9, 0x46, 0xe5, 0x6e, 0x03, 0x38, 0x81,
	0xba, 0x24, 0x4a, 0x51, 0x36, 0x2e, 0xff, 0xc0, 0xf3, 0x6e, 0xec, 0x5b, 0x06, 0xf0, 0x76, 0xcf,
	0x66, 0x30, 0x53, 0x2b, 0xc8, 0x7e, 0x4d, 0x5e, 0x1e, 0x3a, 0x08, 0x6a, 0x4b, 0x98, 0xb1, 0x0d,
	0xcd, 0xc5, 0xe0, 0x85, 0x27, 0x9e, 0x8d, 0x86, 0x6e, 0xe0, 0xd9, 0x3d, 0xe7, 0xc0, 0xb1, 0xf7,
	0xf5, 0x7b, 0xc6, 0x06, 0x54, 0xad, 0xc1, 0x40, 0xd7, 0x8c, 0x26, 0x3c, 0xfe, 0x68, 0x77, 0x91,
	0xe5, 0xee, 0x23, 0xcb, 0xf3, 0x90, 0xd5, 0x0b, 0x9d, 0x63, 0x27, 0x3c, 0xd1, 0x2b, 0xc6, 0x03,
	0xa8, 0xed, 0xdb, 0xc7, 0x4e, 0xcf, 0x2e, 0x80, 0x40, 0xaf, 0xb6, 0xbe, 0x69, 0xf0, 0xd4, 0xc2,
	0x98, 0x67, 0x4c, 0x79, 0x91, 0x94, 0xe7, 0x5c, 0xc4, 0x72, 0x55, 0xc6, 0xa1, 0xe3, 0xc0, 0xd6,
	0x1f, 0x80, 0xf1, 0x0c, 0x5a, 0xbd, 0x23, 0x37, 0xb0, 0xdd, 0x10, 0x05, 0xa1, 0x15, 0x0e, 0x83,
	0x2b, 0x09, 0x6d, 0xc1, 0xa6, 0x7b, 0x14, 0xa2, 0xbe, 0x73, 0x6c, 0xbb, 0xba, 0x56, 0xac, 0xf4,
	0xec, 0xb1, 0xd2, 0x7d, 0x05, 0x2f, 0xb8, 0x18, 0x9b, 0x78, 0x22, 0xf8, 0x94, 0x66, 0x53, 0xf3,
	0xf2, 0xfe, 0x2d, 0x4d, 0x99, 0x8b, 0xfb, 0xf7, 0xb0, 0xea, 0x69, 0xbf, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x46, 0x4d, 0x57, 0xc3, 0x9e, 0x07, 0x00, 0x00,
}
